[{"path":"https://ctoruno.github.io/WJPr/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 WJPr authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":[]},{"path":"https://ctoruno.github.io/WJPr/articles/dataviz.html","id":"preparing-the-data","dir":"Articles","previous_headings":"Bar Chart","what":"Preparing the data","title":"Data Visualization with WJPr","text":"begin, plot simple vertical bar chart. GPP dataset, common use case involves visualizing percentage responses across different groups respondents. example, plot percentage respondents country “lot” “” trust Institution . calculated percentage people answered 1 2 question Q1A. first step wrangle data accordingly:","code":"data4bars <- gpp_data %>%   select(country, year, q1a) %>%   group_by(country, year) %>%   mutate(     q1a = as.double(q1a),     trust = case_when(       q1a <= 2  ~ 1,       q1a <= 4  ~ 0,       q1a == 99 ~ NA_real_     ),     year = as.character(year)   ) %>%   summarise(     trust   = mean(trust, na.rm = TRUE),     .groups = \"keep\"   ) %>%   mutate(     trust = trust*100   ) %>%   filter(year == \"2022\")  kbl(data4bars)"},{"path":"https://ctoruno.github.io/WJPr/articles/dataviz.html","id":"simple-vertical-chart","dir":"Articles","previous_headings":"Bar Chart","what":"Simple vertical chart","title":"Data Visualization with WJPr","text":"data prepared, can create basic vertical bar chart using wjp_bars() function. need specify names columns contain values plotted Y-axis (target) categories displayed X-axis (grouping).","code":"wjp_bars(     data4bars,                   target    = \"trust\",             grouping  = \"country\"     )"},{"path":"https://ctoruno.github.io/WJPr/articles/dataviz.html","id":"controlling-color","dir":"Articles","previous_headings":"Bar Chart","what":"Controlling color","title":"Data Visualization with WJPr","text":"Colors can customized using colors cvec parameters. colors parameter specifies column used distinguish color groups, cvec named vector maps specific values specific colors. example, give bars consistent cool gray color, can use “year” column colors map year “2002” color code “#8789C0”.  prefer assign unique color country, ’ll need create new column grouping parameter already using “country” column. example , create new column called “color_variable” values “country” column:","code":"wjp_bars(     data4bars,                   target    = \"trust\",             grouping  = \"country\",     colors    = \"year\",     cvec      = c(\"2022\" = \"#8789C0\") ) data4bars <- data4bars %>%   mutate(     color_variable = country   )  wjp_bars(     data4bars,                   target    = \"trust\",             grouping  = \"country\",     colors    = \"color_variable\",     cvec      = c(\"Atlantis\"  = \"#2E4057\",                   \"Narnia\"    = \"#083D77\",                   \"Neverland\" = \"#F4D35E\") )"},{"path":"https://ctoruno.github.io/WJPr/articles/dataviz.html","id":"adding-value-labels","dir":"Articles","previous_headings":"Bar Chart","what":"Adding value labels","title":"Data Visualization with WJPr","text":"add value labels bars, use labels lab_pos parameters. labels parameter specifies column containing label values, lab_pos determines position labels. Since target column may contain values many decimals, ’s common create separate column rounded labels. example, create two new columns, value_label label_position, placing labels 5 percentage points tops bars:","code":"data4bars <- data4bars %>%   mutate(     value_label = paste0(       format(         round(trust, 0),         nsmall = 0       ),       \"%\"     ),     label_position = trust + 5   )  wjp_bars(     data4bars,                   target    = \"trust\",             grouping  = \"country\",     labels    = \"value_label\",     lab_pos   = \"label_position\",     colors    = \"color_variable\",     cvec      = c(\"Atlantis\"  = \"#2E4057\",                   \"Narnia\"    = \"#083D77\",                   \"Neverland\" = \"#F4D35E\") )"},{"path":"https://ctoruno.github.io/WJPr/articles/dataviz.html","id":"switch-to-horizontal-bars","dir":"Articles","previous_headings":"Bar Chart","what":"Switch to horizontal bars","title":"Data Visualization with WJPr","text":"default, bars plotted vertically. However, switching horizontal bars simple setting direction parameter “horizontal”.","code":"wjp_bars(     data4bars,                   target    = \"trust\",             grouping  = \"country\",     labels    = \"value_label\",     lab_pos   = \"label_position\",     colors    = \"color_variable\",     cvec      = c(\"Atlantis\"  = \"#2E4057\",                   \"Narnia\"    = \"#083D77\",                   \"Neverland\" = \"#F4D35E\"),     direction = \"horizontal\" )"},{"path":"https://ctoruno.github.io/WJPr/articles/dataviz.html","id":"stacked-bars-chart","dir":"Articles","previous_headings":"","what":"Stacked Bars Chart","title":"Data Visualization with WJPr","text":"wjp_bars() function can also used create stacked bar charts. instance, instead plotting percentage respondents “lot” “” trust Institution , can visualize percentage distribution possible responses country. First, modify data reflect new design: Notice transform q1a column factor variable define specific levels (order) responses. Specifying factor levels allows us control answers displayed chart. don’t define factor levels, responses default alphabetical order, may align intended order ordinal variable. data ready, can use wjp_bars() function , time setting stacked parameter “TRUE”:","code":"data4bars <- gpp_data %>%   filter(     year == 2022   ) %>%   select(country, q1a) %>%   mutate(     q1a  = case_when(       q1a == 1  ~ \"A lot\",       q1a == 2  ~ \"Some\",       q1a == 3  ~ \"Little\",       q1a == 4  ~ \"None\",       q1a == 99 ~ \"No answer\",     ),     q1a = factor(       q1a,        levels = c(\"A lot\", \"Some\", \"Little\", \"None\", \"No answer\")     )   ) %>%   group_by(country, q1a) %>%   count() %>%   group_by(country) %>%   arrange(country, desc(q1a)) %>%   mutate(     total       = sum(n),     percentage  = (n/total)*100,     value_label = paste0(       format(         round(percentage, 1),         nsmall = 1       ),       \"%\"     ),     value_label = if_else(percentage >= 5, value_label, NA_character_),     label_position = cumsum(percentage)-(percentage/2)   ) %>%   select(     country, q1a, percentage, value_label, label_position   )  kbl(data4bars) stacked_bar <- wjp_bars(     data4bars,                   target    = \"percentage\",             grouping  = \"country\",     labels    = \"value_label\",     lab_pos   = \"label_position\",     colors    = \"q1a\",     cvec      = c(\"A lot\"     = \"#32382E\",                   \"Some\"      = \"#899878\",                   \"Little\"    = \"#E4E6C3\",                   \"None\"      = \"#BF4342\",                   \"No answer\" = \"#858585\"),     direction = \"horizontal\",     stacked   = TRUE )  stacked_bar"},{"path":"https://ctoruno.github.io/WJPr/articles/dataviz.html","id":"diverging-bars-chart","dir":"Articles","previous_headings":"","what":"Diverging Bars Chart","title":"Data Visualization with WJPr","text":"Diverging bar charts variation standard bar charts use positive negative sides Cartesian plane display information. example, let’s revisit earlier case plotted levels trust Institution . diverging bars, can plot percentage respondents answered “lot” “” one side, percentage respondents answered “Little” “None” . achieve , first need wrangle data slightly differently: Diverging bar charts variation standard bar charts use positive negative sides Cartesian plane display information. example, let’s revisit earlier case plotted levels trust Institution . diverging bars, can plot percentage respondents answered “lot” “” one side, percentage respondents answered “Little” “None” . achieve , first need wrangle data slightly differently: Pay close attention create new variable, direction, specify direction values plotted. Values associated “negative” direction converted negative numbers. data prepared, can use wjp_divbars() function create chart. Several parameters used way wjp_bars() function: target: Specifies column containing values plotted. grouping: Specifies column containing categorical groupings. cvec: Contains named vector links specific values color codes. labels: Specifies column containing value labels display (optional). addition familiar parameters, wjp_divbars() function two unique parameters essential diverging bar charts: diverging: Specifies column name identifies direction values (positive negative). negative: Specifies value diverging column indicates negative values. combining parameters, wjp_divbars() function allows clear effective visualization contrasting groups within data.","code":"data4divbars <- gpp_data %>%   filter(     year == 2022   ) %>%   select(country, q1a) %>%   mutate(     q1a  = case_when(       q1a <= 2  ~ \"Trust\",       q1a <= 4  ~ \"No Trust\"     )   ) %>%   group_by(country, q1a) %>%   count() %>%   filter(     !is.na(q1a)   ) %>%   group_by(country) %>%   mutate(     total       = sum(n),     percentage  = (n/total)*100,     value_label = paste0(       format(         round(percentage, 1),         nsmall = 1       ),       \"%\"     ),     value_label    = if_else(percentage >= 5,                               value_label,                               NA_character_),     direction      = if_else(q1a == \"Trust\",                               \"positive\",                               \"negative\"),     percentage     = if_else(direction == \"negative\",                               percentage*-1,                               percentage),     label_position = (percentage/2)   ) %>%   select(     country, q1a, percentage, value_label, label_position, direction   )  kbl(data4divbars) wjp_divbars(     data4divbars,                  target      = \"percentage\",            grouping    = \"country\",              diverging   = \"q1a\",          negative    = \"negative\",        cvec        = c(\"Trust\"     = \"#4F518C\",                     \"No Trust\"  = \"#2C2A4A\"),     labels      = \"value_label\" )"},{"path":"https://ctoruno.github.io/WJPr/articles/dataviz.html","id":"line-chart","dir":"Articles","previous_headings":"","what":"Line Chart","title":"Data Visualization with WJPr","text":"Line charts great way display evolution values time. wjp_lines() function allows create line charts ease. Let’s assume want examine percentage people “lot” “” trust Institution Atlantis time. begin, need wrangle data match design: Note also retaining data trust Institution B Institution C, pivoting dataset long format. However, simplicity, start plotting percentage people trust Institution time. can achieve wjp_lines() function. Many parameters work similarly functions: target: Specifies column containing values plotted Y-axis. grouping: Specifies column containing categorical groupings. line charts, year time variable. colors: Specifies column used distinguish different colors lines. cvec: Contains named vector mapping specific values corresponding color codes. labels: Specifies column containing value labels display, . Additionally, wjp_lines() function requires ngroups parameter define number groups. ’s set : single line: plotting one line, example , set ngroups = 1.  multiple lines: plotting multiple lines, specify column containing group identifiers. case, also consider setting repel = TRUE prevent overlapping value labels. Note ggrepel package must loaded feature work.","code":"data4lines <- gpp_data %>%   filter(     country == \"Atlantis\"   ) %>%   select(year, q1a, q1b, q1c) %>%   mutate(     across(       !year,       \\(x) as.double(x)     ),     across(       !year,       ~case_when(         .x <= 2  ~ 1,         .x <= 4  ~ 0,         .x == 99 ~ NA_real_       )     ),     year = as.character(year)   ) %>%   group_by(year) %>%   summarise(     across(       everything(),       \\(x) mean(x, na.rm = TRUE)     ),     .groups = \"keep\"   ) %>%   mutate(     across(       everything(),       \\(x) x*100     )   ) %>%   pivot_longer(     !year,     names_to  = \"variable\",     values_to = \"percentage\"    ) %>%   mutate(     institution = case_when(       variable == \"q1a\" ~ \"Institution A\",       variable == \"q1b\" ~ \"Institution B\",       variable == \"q1c\" ~ \"Institution C\"     ),     value_label = paste0(       format(         round(percentage, 0),         nsmall = 0       ),       \"%\"     )   )  kbl(data4lines) wjp_lines(     data4lines %>% filter(institution == \"Institution A\"),                         target         = \"percentage\",                  grouping       = \"year\",     ngroups        = 1,                      colors         = \"institution\",     cvec           = c(\"Institution A\" = \"#08605F\"),     labels         = \"value_label\" ) library(ggrepel) wjp_lines(     data4lines,                         target         = \"percentage\",                  grouping       = \"year\",     ngroups        = data4lines$institution,                      colors         = \"institution\",     cvec           = c(\"Institution A\" = \"#08605F\",                        \"Institution B\" = \"#9E6240\",                        \"Institution C\" = \"#2E0E02\"),     labels         = \"value_label\",     repel          = TRUE )"},{"path":"https://ctoruno.github.io/WJPr/articles/dataviz.html","id":"controlling-opacities","dir":"Articles","previous_headings":"Line Chart","what":"Controlling opacities","title":"Data Visualization with WJPr","text":"wjp_lines() function includes special feature allows highlight specific lines adjusting opacity. instance, want highlight line representing trust levels Institution , start setting transparency = TRUE. , use transparencies parameter pass named vector specifying opacity levels line. Ensure named vector uses values color vector (cvec) align opacities corresponding lines.","code":"wjp_lines(     data4lines,                         target         = \"percentage\",                  grouping       = \"year\",     ngroups        = data4lines$institution,                      colors         = \"institution\",     cvec           = c(\"Institution A\" = \"#08605F\",                        \"Institution B\" = \"#9E6240\",                        \"Institution C\" = \"#2E0E02\"),     labels         = \"value_label\",     repel          = TRUE,     transparency   = TRUE,     transparencies = c(\"Institution A\" = 1.00,                        \"Institution B\" = 0.25,                        \"Institution C\" = 0.25) )"},{"path":"https://ctoruno.github.io/WJPr/articles/dataviz.html","id":"slope-chart","dir":"Articles","previous_headings":"","what":"Slope Chart","title":"Data Visualization with WJPr","text":"Slope charts great choice visualizing evolution variables two specific points time. provide aesthetically pleasing alternative line charts cases. wjp_slope() function designed purpose. Let’s use example disaggregate evolution trust Institution 2017 2022 across three countries. begin preparing data fit design: data ready, can use wjp_slope() function. function relies parameters covered previous examples: target: Specifies column containing values plotted Y-axis. grouping: Specifies column containing categorical groupings. slope charts, usually refers time variable year. colors: Specifies column used distinguish different colors slope chart. cvec: Contains named vector mapping specific values corresponding color codes. labels: Specifies column containing value labels display, . ngroups: Defines number lines plotted. single line, set ngroups = 1. multiple lines, pass column containing group identifiers. repel: Activates ggrepel feature prevent overlapping labels. Note ggrepel package must loaded feature work. Using parameters, can create slope chart effectively highlights changes two points time maintaining clarity visual appeal.","code":"data4slopes <- gpp_data %>%   select(year, gend, q1a) %>%   filter(     year %in% c(2017, 2019)   ) %>%   mutate(     q1a = as.double(q1a),     trust = case_when(       q1a <= 2  ~ 1,       q1a <= 4  ~ 0     ),     gender = case_when(       gend == 1 ~ \"Male\",       gend == 2 ~ \"Female\"     )   ) %>%   group_by(year, gender) %>%   summarise(     trust = mean(trust, na.rm = T)*100,     .groups = \"keep\"   ) %>%   mutate(     value_label = paste0(       format(         round(trust, 0),         nsmall = 0       ),       \"%\"     )   )  kbl(data4slopes) wjp_slope(     data4slopes,                         target    = \"trust\",                  grouping  = \"year\",     ngroups   = data4slopes$gender,                      labels    = \"value_label\",     colors    = \"gender\",     cvec      = c(\"Male\"   = \"#08605F\",                   \"Female\" = \"#9E6240\"),     repel     = TRUE )"},{"path":[]},{"path":"https://ctoruno.github.io/WJPr/articles/dataviz.html","id":"minimal-example","dir":"Articles","previous_headings":"Dots Chart","what":"Minimal Example","title":"Data Visualization with WJPr","text":"Dot charts excellent option displaying multiple variables comparing results across different agents, regions, categories. wjp_dots() function allows create dot charts efficiently effectively. Let’s walk example plot percentage people “lot” “” trust Institutions , B, C, D across three countries: Atlantis, Narnia, Neverland. start, need prepare data minimal example follows: data prepared, can use wjp_dots() function create dot chart. required parameters function consistent explained earlier sections: target: column name containing values plotted dots. grouping: column name containing categorical groupings (e.g., institutions categories compared). colors: column name used assign different colors dots. cvec: named vector linking specific values corresponding color codes.","code":"data4dots <- gpp_data %>%   select(country, q1a, q1b, q1c, q1d) %>%   mutate(     across(       !country,       \\(x) case_when(         x <= 2 ~ 1,         x <= 4 ~ 0       )     )   ) %>%   group_by(country) %>%   summarise(     across(       everything(),       \\(x) mean(x, na.rm = T)*100     ),     .groups = \"keep\"   ) %>%   pivot_longer(     !country,     names_to  = \"variable\",     values_to = \"percentage\"    ) %>%   mutate(     institution = case_when(       variable == \"q1a\" ~ \"Institution A\",       variable == \"q1b\" ~ \"Institution B\",       variable == \"q1c\" ~ \"Institution C\",       variable == \"q1d\" ~ \"Institution D\",     )   ) kbl(data4dots) wjp_dots(     data4dots,                  target      = \"percentage\",     grouping    = \"institution\",       colors      = \"country\",       cvec        = c(\"Atlantis\"  = \"#08605F\",                     \"Narnia\"    = \"#9E6240\",                     \"Neverland\" = \"#2E0E02\") )"},{"path":"https://ctoruno.github.io/WJPr/articles/dataviz.html","id":"controlling-opacities-and-shapes","dir":"Articles","previous_headings":"Dots Chart","what":"Controlling opacities and shapes","title":"Data Visualization with WJPr","text":"special feature wjp_dots() allows apply special highlight certain data points manipulation shapes opacities. , begin setting diffOpac diffShp parameters TRUE. , proceed pass named vector specific values opacities desired symbol codes. control traits works values passed colors cvec parameters. check symbol codes used ggplot, can read ggplot2 documentation.","code":"wjp_dots(     data4dots,                  target      = \"percentage\",     grouping    = \"institution\",       colors      = \"country\",       cvec        = c(\"Atlantis\"  = \"#08605F\",                     \"Narnia\"    = \"#9E6240\",                     \"Neverland\" = \"#2E0E02\"),     diffOpac    = TRUE,     opacities   = c(\"Atlantis\"  = 0.3,                     \"Narnia\"    = 1.0,                     \"Neverland\" = 0.3),     diffShp     = TRUE,          shapes      = c(\"Atlantis\"  = 15,                     \"Narnia\"    = 21,                     \"Neverland\" = 15) )"},{"path":"https://ctoruno.github.io/WJPr/articles/dataviz.html","id":"adding-confidence-intervals","dir":"Articles","previous_headings":"Dots Chart","what":"Adding confidence intervals","title":"Data Visualization with WJPr","text":"wjp_dots() function special feature allows us add confidence intervals plotted data points. comes handy want visualize two data points statistically different . Let’s assume want know trust levels Institution , B, C, D, statistically different males females sample. , first need plot data little bit different given , besides data point (mean), also require standard deviation sample size group variable. data ready. make use wjp_dots() function set draw_ci = TRUE inside function call. Additionally, also need specify sd sample_size parameters, column names contain standard deviation sample size variable group.","code":"data4dots_errorbars <- gpp_data %>%   select(gend, q1a, q1b, q1c, q1d) %>%   mutate(     gend = case_when(       gend == 1 ~ \"Male\",       gend == 2 ~ \"Female\",     ),     across(       !gend,       \\(x) case_when(         x <= 2 ~ 1,         x <= 4 ~ 0       )     )   ) %>%   group_by(gend) %>%   summarise(     across(       c(q1a, q1b, q1c, q1d),       \\(x) mean(x, na.rm = T)*100,       .names = \"{col}_mean\"     ),     across(       c(q1a, q1b, q1c, q1d),       \\(x) sum(!is.na(x)),       .names = \"{col}_n\"     ),     across(       c(q1a, q1b, q1c, q1d),       \\(x) sd(x, na.rm = T)*100,       .names = \"{col}_sd\"     ),     .groups = \"keep\"   ) %>%   pivot_longer(     !gend,     names_to      = c(\"variable\", \"stat\"),      names_pattern = \"(.*)_(.*)\",     values_to     = \"value\"   ) %>%   pivot_wider(     names_from  = \"stat\",     values_from = \"value\"   ) %>%   mutate(     institution = case_when(       variable == \"q1a\" ~ \"Institution A\",       variable == \"q1b\" ~ \"Institution B\",       variable == \"q1c\" ~ \"Institution C\",       variable == \"q1d\" ~ \"Institution D\",     )   )  kbl(data4dots_errorbars) wjp_dots(     data4dots_errorbars,                  target      = \"mean\",     grouping    = \"institution\",       colors      = \"gend\",       cvec        = c(\"Male\"   = \"#08605F\",                     \"Female\" = \"#9E6240\"),     draw_ci     = TRUE,     sd          = \"sd\",     sample_size = \"n\" )"},{"path":"https://ctoruno.github.io/WJPr/articles/dataviz.html","id":"dumbbells","dir":"Articles","previous_headings":"","what":"Dumbbells","title":"Data Visualization with WJPr","text":"Dumbbells good option want focus two different points time multiple variables. wjp_dumbbells function used plot dumbbells purpose. can use data used plotting line chart just filtering two points time. data can apply wjp_dumbbells() function usual parameters reviewed previous sections:  Adding value labels dumbbell chart easy specifying column names value label (labels) label position (labpos) plotting function.","code":"data4dumbbells <- data4lines %>%    filter(year %in% c(\"2017\", \"2022\"))   wjp_dumbbells(     data = data4dumbbells,     target    = \"percentage\",     grouping  = \"institution\",     color     = \"year\",     cvec      = c(\"2017\" = \"#08605F\",                   \"2022\" = \"#9E6240\"),     cgroups   = c(\"2017\", \"2022\") ) data4dumbbells <- data4dumbbells %>%    mutate(     lab_position = if_else(year == \"2022\", percentage-5, percentage+5)   )  wjp_dumbbells(     data = data4dumbbells,     target    = \"percentage\",     grouping  = \"institution\",     color     = \"year\",     cgroups   = c(\"2017\", \"2022\"),     cvec      = c(\"2017\" = \"#08605F\",                   \"2022\" = \"#9E6240\"),     labels    = \"value_label\",     labpos    = \"lab_position\" )"},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":"https://ctoruno.github.io/WJPr/articles/dataviz.html","id":"controlling-the-order-of-elements","dir":"Articles","previous_headings":"","what":"Controlling the order of elements","title":"Data Visualization with WJPr","text":"Sometimes, might want control order show elements charts. plotting functions WJPr package include custom_order order parameter. Let’s say want customize diverging bars showed present bars following specific order: Neverland (1), Atlantis (2), Narnia (3). , begin setting custom_order TRUE adding new column data specific order elements:  can done working dot charts:","code":"data4divbars <- data4divbars %>%   mutate(     order_no = case_when(       country == \"Neverland\" ~ 1,       country == \"Atlantis\"  ~ 2,       country == \"Narnia\"    ~ 3     )   )  wjp_divbars(     data4divbars,                  target       = \"percentage\",            grouping     = \"country\",              diverging    = \"q1a\",          negative     = \"negative\",        cvec         = c(\"Trust\"     = \"#4F518C\",                      \"No Trust\"  = \"#2C2A4A\"),     labels       = \"value_label\",     custom_order = TRUE,     order        = \"order_no\"  ) data4dots <- data4dots %>%   mutate(     order_no = case_when(       variable == \"q1c\" ~ 1,       variable == \"q1b\" ~ 2,       variable == \"q1d\" ~ 3,       variable == \"q1a\" ~ 4     )   )  wjp_dots(     data4dots,                  target      = \"percentage\",     grouping    = \"institution\",       colors      = \"country\",       cvec        = c(\"Atlantis\"  = \"#08605F\",                     \"Narnia\"    = \"#9E6240\",                     \"Neverland\" = \"#2E0E02\"),     order       = \"order_no\" )"},{"path":"https://ctoruno.github.io/WJPr/articles/dataviz.html","id":"adding-more-customizations","dir":"Articles","previous_headings":"","what":"Adding more customizations","title":"Data Visualization with WJPr","text":"plotting functions WJPr package return ggplot object. means , knowledge ggplot, user can customize plot returned plotting function. example, let’s say want customize stacked bars completely remove panel grid add title subtitle . can using labs() theme() functions ggplot2 package shown bellow:","code":"stacked_bar +   labs(     title    = \"Trust in Institution A\",     subtitle = \"Percentage of people who has a lot, some, little, or no trust in Institution A\"   ) +   theme(     axis.text.x         = element_blank(),     panel.grid.major.x  = element_blank(),     plot.title.position = \"plot\",     plot.subtitle       = element_text(face = \"italic\")   )"},{"path":"https://ctoruno.github.io/WJPr/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Carlos . Toruno Paniagua. Author, maintainer.","code":""},{"path":"https://ctoruno.github.io/WJPr/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Toruno Paniagua C (2024). WJPr: World Justice Project data visualizations tools. R package version 1.0.0, https://ctoruno.github.io/WJPr/, https://github.com/ctoruno/WJPr.","code":"@Manual{,   title = {WJPr: World Justice Project data and visualizations tools},   author = {Carlos A. {Toruno Paniagua}},   year = {2024},   note = {R package version 1.0.0, https://ctoruno.github.io/WJPr/},   url = {https://github.com/ctoruno/WJPr}, }"},{"path":"https://ctoruno.github.io/WJPr/index.html","id":"wjpr","dir":"","previous_headings":"","what":"World Justice Project data and visualizations tools","title":"World Justice Project data and visualizations tools","text":"WJPr R package developed streamline data analysis visualization Data Analytics Unit World Justice Project (WJP). package includes essential data tools replicating visualizations WJP Country Reports analyzing Rule Law Index scores.","code":""},{"path":"https://ctoruno.github.io/WJPr/index.html","id":"features","dir":"","previous_headings":"","what":"Features","title":"World Justice Project data and visualizations tools","text":"Version 1.0.0 WJPr offers: wide range visualization functions recreate WJP Country Report charts, bar plots, line graphs, radar charts. Access Rule Law Index scores data, including detailed information factors subfactors. Streamlined tools generating publication-ready graphics.","code":""},{"path":"https://ctoruno.github.io/WJPr/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"World Justice Project data and visualizations tools","text":"WJPr hosted GitHub. install package, ensure devtools package installed use following commands:","code":"# Install WJPr from GitHub devtools::install_github(\"ctoruno/WJPr\")"},{"path":"https://ctoruno.github.io/WJPr/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"World Justice Project data and visualizations tools","text":"Load package R session:","code":"library(WJPr)"},{"path":"https://ctoruno.github.io/WJPr/index.html","id":"example-accessing-rule-of-law-index-data","dir":"","previous_headings":"Usage","what":"Example: Accessing Rule of Law Index Data","title":"World Justice Project data and visualizations tools","text":"package provides built-datasets analysis:","code":"# View the first few rows of the dataset head(WJPr::roli)"},{"path":"https://ctoruno.github.io/WJPr/index.html","id":"example-creating-a-visualization","dir":"","previous_headings":"Usage","what":"Example: Creating a Visualization","title":"World Justice Project data and visualizations tools","text":"example use WJPr create bar chart:","code":"# Always load the WJP fonts if not passing a custom theme to function wjp_fonts()  # Loading data gpp_data <- WJPr::gpp  # Prepare the data data4bars <- gpp_data %>%   select(country, year, q1a) %>%   group_by(country, year) %>%   mutate(     q1a = as.double(q1a),     trust = case_when(       q1a <= 2  ~ 1,       q1a <= 4  ~ 0,       q1a == 99 ~ NA_real_     ),     year = as.character(year)   ) %>%   summarise(     trust   = mean(trust, na.rm = TRUE),     .groups = \"keep\"   ) %>%   mutate(     trust = trust*100   ) %>%   filter(year == \"2022\")  # Draw the chart wjp_bars(     data4bars,                   target    = \"trust\",             grouping  = \"country\",     colors    = \"year\",     cvec      = c(\"2022\" = \"#8789C0\") )"},{"path":"https://ctoruno.github.io/WJPr/index.html","id":"documentation","dir":"","previous_headings":"","what":"Documentation","title":"World Justice Project data and visualizations tools","text":"Comprehensive documentation available functions datasets. Use R help system access :","code":"?WJPr::wjp_lines"},{"path":"https://ctoruno.github.io/WJPr/index.html","id":"contributing","dir":"","previous_headings":"","what":"Contributing","title":"World Justice Project data and visualizations tools","text":"Contributions welcome! suggestions, bug reports, new feature ideas, please open issue submit pull request GitHub.","code":""},{"path":"https://ctoruno.github.io/WJPr/index.html","id":"license","dir":"","previous_headings":"","what":"License","title":"World Justice Project data and visualizations tools","text":"project licensed MIT License. See LICENSE.md file details.","code":""},{"path":"https://ctoruno.github.io/WJPr/index.html","id":"acknowledgments","dir":"","previous_headings":"","what":"Acknowledgments","title":"World Justice Project data and visualizations tools","text":"WJPr developed Data Analytics Unit World Justice Project. Special thanks whole team invaluable input creating package.","code":""},{"path":"https://ctoruno.github.io/WJPr/reference/WJPr-package.html","id":null,"dir":"Reference","previous_headings":"","what":"WJPr: World Justice Project data and visualizations tools — WJPr-package","title":"WJPr: World Justice Project data and visualizations tools — WJPr-package","text":"WJPr package contains important data visualization tools used Data Analytics Unit World Justice Project. Version 1.0.0 comes wide range visualization functions replicating image charts Country Reports. Additionally, can find Rule Law Index scores data factors subfactors complementary data.","code":""},{"path":[]},{"path":"https://ctoruno.github.io/WJPr/reference/WJPr-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"WJPr: World Justice Project data and visualizations tools — WJPr-package","text":"Maintainer: Carlos . Toruno Paniagua ctoruno@worldjusticeproject.org","code":""},{"path":"https://ctoruno.github.io/WJPr/reference/gpp.html","id":null,"dir":"Reference","previous_headings":"","what":"GPP sample data — gpp","title":"GPP sample data — gpp","text":"subset data original General Population Poll Data. Countries years renamed group three fictional countries years.","code":""},{"path":"https://ctoruno.github.io/WJPr/reference/gpp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"GPP sample data — gpp","text":"","code":"gpp"},{"path":[]},{"path":"https://ctoruno.github.io/WJPr/reference/gpp.html","id":"gpp","dir":"Reference","previous_headings":"","what":"gpp","title":"GPP sample data — gpp","text":"data frame 750 rows 19 columns: country Country name year Year gend Gender age Age q1x Trust X institution q49x Justice System evaluation","code":""},{"path":"https://ctoruno.github.io/WJPr/reference/gpp.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"GPP sample data — gpp","text":"https://worldjusticeproject.org/","code":""},{"path":"https://ctoruno.github.io/WJPr/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://ctoruno.github.io/WJPr/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://ctoruno.github.io/WJPr/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"https://ctoruno.github.io/WJPr/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling rhs(lhs).","code":""},{"path":"https://ctoruno.github.io/WJPr/reference/roli.html","id":null,"dir":"Reference","previous_headings":"","what":"Rule of Law Index Historical Data — roli","title":"Rule of Law Index Historical Data — roli","text":"Index scores, country-year level, factors subfactors 2012 2024.","code":""},{"path":"https://ctoruno.github.io/WJPr/reference/roli.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rule of Law Index Historical Data — roli","text":"","code":"roli"},{"path":[]},{"path":"https://ctoruno.github.io/WJPr/reference/roli.html","id":"roli","dir":"Reference","previous_headings":"","what":"roli","title":"Rule of Law Index Historical Data — roli","text":"data frame 1,341 rows 57 columns: country Country name year Year roli Rule Law Index Score f1, f2, f3, f4, f5, f6, f7, f8 Factor scores sfxx Subfactor scores","code":""},{"path":"https://ctoruno.github.io/WJPr/reference/roli.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Rule of Law Index Historical Data — roli","text":"https://worldjusticeproject.org/","code":""},{"path":"https://ctoruno.github.io/WJPr/reference/wjp_bars.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot a Bar Chart following WJP style guidelines — wjp_bars","title":"Plot a Bar Chart following WJP style guidelines — wjp_bars","text":"wjp_bars() takes data frame specific data structure (usually long shaped) returns ggplot object bar chart following WJP style guidelines.","code":""},{"path":"https://ctoruno.github.io/WJPr/reference/wjp_bars.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot a Bar Chart following WJP style guidelines — wjp_bars","text":"","code":"wjp_bars(   data,   target,   grouping,   labels = NULL,   colors = NULL,   cvec = NULL,   direction = \"vertical\",   stacked = FALSE,   lab_pos = NULL,   expand = FALSE,   order = NULL,   width = 0.9,   ptheme = WJP_theme() )"},{"path":"https://ctoruno.github.io/WJPr/reference/wjp_bars.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot a Bar Chart following WJP style guidelines — wjp_bars","text":"data Data frame containing data plot target String. Column name variable supply values plot. grouping String. Column name variable supplies grouping values. Values can grouped either X- Y- Axis. labels String. Column name variable containing value labels display plot. Default NULL. colors String. Column name variable contains color grouping. Default NULL. cvec Named vector colors apply bars. Vector names values specified \"colors\" variables, vector values direction String. bars plotted \"horizontal\" \"vertical\" way? Default \"vertical\". stacked Boolean. TRUE, bars stacked top per group. Default FALSE. lab_pos String. Column name variable contains coordinates value labels. Default NULL. expand Boolean. TRUE, plot give extra space value labels. Default FALSE. order String. Column name variable contains custom order labels. width Numeric value 0 1. Width bars percentage space bar. Default 0.9. ptheme ggplot theme function apply plot. default, function applies WJP_theme()","code":""},{"path":"https://ctoruno.github.io/WJPr/reference/wjp_bars.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot a Bar Chart following WJP style guidelines — wjp_bars","text":"ggplot object","code":""},{"path":"https://ctoruno.github.io/WJPr/reference/wjp_bars.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot a Bar Chart following WJP style guidelines — wjp_bars","text":"","code":"# Always load the WJP fonts (optional) wjp_fonts()  # Preparing data gpp_data <- WJPr::gpp  data4bars <- gpp_data %>%   select(country, year, q1a) %>%   group_by(country, year) %>%   mutate(     q1a = as.double(q1a),     trust = case_when(       q1a <= 2  ~ 1,       q1a <= 4  ~ 0,       q1a == 99 ~ NA_real_     ),     year = as.character(year)   ) %>%   summarise(     trust   = mean(trust, na.rm = TRUE),     .groups = \"keep\"   ) %>%   mutate(     trust = trust*100   ) %>%   filter(year == \"2022\") %>%   mutate(     color_variable = country,     value_label = paste0(       format(         round(trust, 0),         nsmall = 0       ),       \"%\"     ),     label_position = trust + 5   ) #> Error in gpp_data %>% select(country, year, q1a) %>% group_by(country,     year) %>% mutate(q1a = as.double(q1a), trust = case_when(q1a <=     2 ~ 1, q1a <= 4 ~ 0, q1a == 99 ~ NA_real_), year = as.character(year)) %>%     summarise(trust = mean(trust, na.rm = TRUE), .groups = \"keep\") %>%     mutate(trust = trust * 100) %>% filter(year == \"2022\") %>%     mutate(color_variable = country, value_label = paste0(format(round(trust,         0), nsmall = 0), \"%\"), label_position = trust + 5): could not find function \"%>%\"  # Plotting chart wjp_bars(   data4bars,                 target    = \"trust\",           grouping  = \"country\",   labels    = \"value_label\",   lab_pos   = \"label_position\",   colors    = \"color_variable\",   cvec      = c(\"Atlantis\"  = \"#2E4057\",                 \"Narnia\"    = \"#083D77\",                 \"Neverland\" = \"#F4D35E\")   ) #> Error in data %>% dplyr::rename(target_var = all_of(target), grouping_var = all_of(grouping),     labels_var = all_of(labels), colors_var = all_of(colors),     order_var = all_of(order)): could not find function \"%>%\""},{"path":"https://ctoruno.github.io/WJPr/reference/wjp_divbars.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot a Diverging Horizontal Bar Chart following WJP style guidelines — wjp_divbars","title":"Plot a Diverging Horizontal Bar Chart following WJP style guidelines — wjp_divbars","text":"wjp_divbars() takes data frame specific data structure (usually long shaped) returns ggplot object diverging horizontal bar chart following WJP style guidelines.","code":""},{"path":"https://ctoruno.github.io/WJPr/reference/wjp_divbars.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot a Diverging Horizontal Bar Chart following WJP style guidelines — wjp_divbars","text":"","code":"wjp_divbars(   data,   target,   grouping,   diverging,   negative = NULL,   cvec = NULL,   labels = NULL,   label_color = \"#ffffff\",   custom_order = F,   order = NULL,   ptheme = WJP_theme() )"},{"path":"https://ctoruno.github.io/WJPr/reference/wjp_divbars.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot a Diverging Horizontal Bar Chart following WJP style guidelines — wjp_divbars","text":"data Data frame containing data plot target String. Column name variable supply values plot. grouping String. Column name variable supplies grouping values (Y-Axis Labels). diverging String. Column name variable supplies diverging values. negative String. Value indicates bar negative quadrant. cvec Named vector colors apply bar segment. Default NULL. labels String. Column name variable supplies labels show plot. Default NULL. label_color String. Hex code use labels. custom_order Boolean. TRUE, plot expect custom order graph labels. Default FALSE. order String. Vector contains custom order y-axis labels. Default NULL. ptheme ggplot theme function apply plot. default, function applies WJP_theme()","code":""},{"path":"https://ctoruno.github.io/WJPr/reference/wjp_divbars.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot a Diverging Horizontal Bar Chart following WJP style guidelines — wjp_divbars","text":"ggplot object","code":""},{"path":"https://ctoruno.github.io/WJPr/reference/wjp_divbars.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot a Diverging Horizontal Bar Chart following WJP style guidelines — wjp_divbars","text":"","code":"# Always load the WJP fonts (optional) wjp_fonts()  # Preparing data data4divbars <- WJPr::gpp %>% filter(   year == 2022 ) %>%   select(country, q1a) %>%   mutate(     q1a  = case_when(       q1a <= 2  ~ \"Trust\",       q1a <= 4  ~ \"No Trust\"     )   ) %>%   group_by(country, q1a) %>%   count() %>%   filter(     !is.na(q1a)   ) %>%   group_by(country) %>%   mutate(     total       = sum(n),     percentage  = (n/total)*100,     value_label = paste0(       format(         round(percentage, 1),         nsmall = 1       ),       \"%\"     ),     value_label    = if_else(percentage >= 5,                               value_label,                               NA_character_),     direction      = if_else(q1a == \"Trust\",                               \"positive\",                               \"negative\"),     percentage     = if_else(direction == \"negative\",                               percentage*-1,                               percentage),     label_position = (percentage/2)   ) %>%   select(     country, q1a, percentage, value_label, label_position, direction   ) #> Error in WJPr::gpp %>% filter(year == 2022) %>% select(country, q1a) %>%     mutate(q1a = case_when(q1a <= 2 ~ \"Trust\", q1a <= 4 ~ \"No Trust\")) %>%     group_by(country, q1a) %>% count() %>% filter(!is.na(q1a)) %>%     group_by(country) %>% mutate(total = sum(n), percentage = (n/total) *     100, value_label = paste0(format(round(percentage, 1), nsmall = 1),     \"%\"), value_label = if_else(percentage >= 5, value_label,     NA_character_), direction = if_else(q1a == \"Trust\", \"positive\",     \"negative\"), percentage = if_else(direction == \"negative\",     percentage * -1, percentage), label_position = (percentage/2)) %>%     select(country, q1a, percentage, value_label, label_position,         direction): could not find function \"%>%\"  # Plotting chart wjp_divbars(   data4divbars,                target      = \"percentage\",          grouping    = \"country\",            diverging   = \"q1a\",        negative    = \"negative\",      cvec        = c(\"Trust\"     = \"#4F518C\",                   \"No Trust\"  = \"#2C2A4A\"),   labels      = \"value_label\" ) #> Error in data %>% rename(target_var = all_of(target), rows_var = all_of(grouping),     grouping_var = all_of(diverging), labels_var = all_of(labels),     order_var = any_of(order)): could not find function \"%>%\""},{"path":"https://ctoruno.github.io/WJPr/reference/wjp_dots.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot a Dots Chart following WJP style guidelines — wjp_dots","title":"Plot a Dots Chart following WJP style guidelines — wjp_dots","text":"wjp_dots() takes data frame specific data structure (usually long shaped) returns ggplot object dots chart following WJP style guidelines.","code":""},{"path":"https://ctoruno.github.io/WJPr/reference/wjp_dots.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot a Dots Chart following WJP style guidelines — wjp_dots","text":"","code":"wjp_dots(   data,   target,   grouping,   colors,   cvec = NULL,   order = NULL,   diffOpac = FALSE,   opacities = NULL,   diffShp = FALSE,   shapes = NA,   draw_ci = FALSE,   sd = NULL,   sample_size = NULL,   bgcolor = \"#ffffff\",   ptheme = WJP_theme() )"},{"path":"https://ctoruno.github.io/WJPr/reference/wjp_dots.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot a Dots Chart following WJP style guidelines — wjp_dots","text":"data Data frame containing data plot target String. Column name variable supply values plot. grouping String. Column name variable supplies Y-Axis labels show plot. colors String. Column name variable supplies grouping values. plot show different color per group. cvec Named vector colors apply dots. Default NULL. order String. Column name variable contains custom order labels. diffOpac Boolean. TRUE, plot expect different levels opacities dots. Default FALSE. opacities Named vector opacity levels apply dots. Default NULL. diffShp Boolean. TRUE, plot expect different shapes dots. Default FALSE. shapes Named vector shapes displayed. Default NULL. draw_ci Boolean. TRUE, draw binomial confidence interval target value parameter interest. sd String. Column name variable supplies standard error drawing confidence intervals. sample_size String. Column name variable supplies number observations drawing confidence intervals. bgcolor String. Hex code \"white\" background strips. ptheme ggplot theme function apply plot. default, function applies WJP_theme().","code":""},{"path":"https://ctoruno.github.io/WJPr/reference/wjp_dots.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot a Dots Chart following WJP style guidelines — wjp_dots","text":"ggplot object","code":""},{"path":"https://ctoruno.github.io/WJPr/reference/wjp_dots.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot a Dots Chart following WJP style guidelines — wjp_dots","text":"","code":"# Always load the WJP fonts if not passing a custom theme to function wjp_fonts()  # Preparing data data4dots <- gpp_data %>%   select(country, q1a, q1b, q1c, q1d) %>%   mutate(     across(       !country,       \\(x) case_when(         x <= 2 ~ 1,         x <= 4 ~ 0       )     )   ) %>%   group_by(country) %>%   summarise(     across(       everything(),       \\(x) mean(x, na.rm = T)*100     ),     .groups = \"keep\"   ) %>%   pivot_longer(     !country,     names_to  = \"variable\",     values_to = \"percentage\"    ) %>%   mutate(     institution = case_when(       variable == \"q1a\" ~ \"Institution A\",       variable == \"q1b\" ~ \"Institution B\",       variable == \"q1c\" ~ \"Institution C\",       variable == \"q1d\" ~ \"Institution D\",     )   ) #> Error in gpp_data %>% select(country, q1a, q1b, q1c, q1d) %>% mutate(across(!country,     function(x) case_when(x <= 2 ~ 1, x <= 4 ~ 0))) %>% group_by(country) %>%     summarise(across(everything(), function(x) mean(x, na.rm = T) *         100), .groups = \"keep\") %>% pivot_longer(!country, names_to = \"variable\",     values_to = \"percentage\") %>% mutate(institution = case_when(variable ==     \"q1a\" ~ \"Institution A\", variable == \"q1b\" ~ \"Institution B\",     variable == \"q1c\" ~ \"Institution C\", variable == \"q1d\" ~         \"Institution D\", )): could not find function \"%>%\"  # Plotting chart wjp_dots(   data4dots,                target      = \"percentage\",   grouping    = \"institution\",     colors      = \"country\",     cvec        = c(\"Atlantis\"  = \"#08605F\",                   \"Narnia\"    = \"#9E6240\",                   \"Neverland\" = \"#2E0E02\") ) #> Error in data %>% rename(target_var = all_of(target), colors_var = all_of(colors),     grouping_var = all_of(grouping)) %>% mutate(target_var = as.numeric(target_var)): could not find function \"%>%\""},{"path":"https://ctoruno.github.io/WJPr/reference/wjp_dumbbells.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot a Dumbbell Chart following WJP style guidelines — wjp_dumbbells","title":"Plot a Dumbbell Chart following WJP style guidelines — wjp_dumbbells","text":"wjp_dumbbells() takes data frame specific data structure (usually long shaped) returns ggplot object dumbbell chart following WJP style guidelines.","code":""},{"path":"https://ctoruno.github.io/WJPr/reference/wjp_dumbbells.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot a Dumbbell Chart following WJP style guidelines — wjp_dumbbells","text":"","code":"wjp_dumbbells(   data,   target,   grouping,   cgroups,   color,   labels = NULL,   labpos = NULL,   cvec = NULL,   order = NULL,   ptheme = WJP_theme() )"},{"path":"https://ctoruno.github.io/WJPr/reference/wjp_dumbbells.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot a Dumbbell Chart following WJP style guidelines — wjp_dumbbells","text":"data data frame containing data plotted. target string specifying variable data frame contains numeric values plotted. grouping string specifying variable data frame contains categories rows. cgroups vector two strings specifying groups compared dumbbell plot. color string specifying variable data frame indicates groups start end points. labels string specifying variable data frame contains text labels display. Default NULL. labpos string specifying variable data frame contains label positions. cvec vector colors apply points lines. Default NULL. order named vector specifying order categories. Default NULL. ptheme ggplot2 theme object applied plot. Default WJP_theme().","code":""},{"path":"https://ctoruno.github.io/WJPr/reference/wjp_dumbbells.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot a Dumbbell Chart following WJP style guidelines — wjp_dumbbells","text":"ggplot object representing dumbbell plot.","code":""},{"path":"https://ctoruno.github.io/WJPr/reference/wjp_dumbbells.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot a Dumbbell Chart following WJP style guidelines — wjp_dumbbells","text":"","code":"# Always load the WJP fonts (optional) wjp_fonts()  # Preparing data gpp_data <- WJPr::gpp  library(dplyr) #>  #> Attaching package: ‘dplyr’ #> The following objects are masked from ‘package:stats’: #>  #>     filter, lag #> The following objects are masked from ‘package:base’: #>  #>     intersect, setdiff, setequal, union library(tidyr)  data4lines <- gpp_data %>% filter(   country == \"Atlantis\" & year %in% c(2017, 2022) ) %>%   select(year, q1a, q1b, q1c) %>%   mutate(     across(       !year,       \\(x) as.double(x)     ),     across(       !year,       ~case_when(         .x <= 2  ~ 1,         .x <= 4  ~ 0,         .x == 99 ~ NA_real_       )     ),     year = as.character(year)   ) %>%   group_by(year) %>%   summarise(     across(       everything(),       \\(x) mean(x, na.rm = TRUE)     ),     .groups = \"keep\"   ) %>%   mutate(     across(       everything(),       \\(x) x*100     )   ) %>%   pivot_longer(     !year,     names_to  = \"variable\",     values_to = \"percentage\"    ) %>%   mutate(     institution = case_when(       variable == \"q1a\" ~ \"Institution A\",       variable == \"q1b\" ~ \"Institution B\",       variable == \"q1c\" ~ \"Institution C\"     ),     value_label = paste0(       format(         round(percentage, 0),         nsmall = 0       ),       \"%\"     )   ) #> Error in mutate(., across(!year, function(x) as.double(x)), across(!year,     ~case_when(.x <= 2 ~ 1, .x <= 4 ~ 0, .x == 99 ~ NA_real_)),     year = as.character(year)): ℹ In argument: `across(!year, function(x) as.double(x))`. #> Caused by error in `across()`: #> ! Can't compute column `q1a`. #> Caused by error in `as.double()`: #> ! Can't convert `x` <haven_labelled> to <double>.      # Plotting chart   wjp_dumbbells(     data = data4dumbbells,     target    = \"percentage\",     grouping  = \"institution\",     color     = \"year\",     cvec      = c(\"2017\" = \"#08605F\",                   \"2022\" = \"#9E6240\"),     cgroups   = c(\"2017\", \"2022\")  ) #> Error: object 'data4dumbbells' not found"},{"path":"https://ctoruno.github.io/WJPr/reference/wjp_edgebars.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot a Horizontal Edgebars Chart following WJP style guidelines — wjp_edgebars","title":"Plot a Horizontal Edgebars Chart following WJP style guidelines — wjp_edgebars","text":"wjp_edgebars() takes data frame specific data structure (usually long shaped) returns ggplot object edgebar chart following WJP style guidelines.","code":""},{"path":"https://ctoruno.github.io/WJPr/reference/wjp_edgebars.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot a Horizontal Edgebars Chart following WJP style guidelines — wjp_edgebars","text":"","code":"wjp_edgebars(   data,   y_value,   x_var,   label_var,   color_var = NULL,   bar_colors = NULL,   x_lab_pos = NULL,   y_lab_pos = 0,   nudge_lab = 2.5,   margin_top = 20,   bar_width = 0.35,   ptheme = WJP_theme() )"},{"path":"https://ctoruno.github.io/WJPr/reference/wjp_edgebars.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot a Horizontal Edgebars Chart following WJP style guidelines — wjp_edgebars","text":"data data frame containing data plotted. y_value string specifying variable data frame contains numeric values plotted bars. x_var string specifying variable data frame contains categories x-axis. label_var string specifying variable data frame contains labels displayed near bars. color_var string specifying variable data frame contains color groupings bars. Default NULL. bar_colors named vector specifying colors bars. Default NULL. x_lab_pos string specifying variable data frame contains order bars displayed. Default NULL. y_lab_pos numeric value specifying y-axis position displaying labels. Default 0. nudge_lab numeric value specifying padding displaying labels milimeters. Default 2.5. margin_top numeric value specifying top margin plot. Default 20. bar_width numeric value specifying width bars. single bars default value 0.35 recommended, plots two bars value 0.5 suitable. ptheme ggplot aesthetic theme applied chart. Default WJP_theme initilized package.","code":""},{"path":"https://ctoruno.github.io/WJPr/reference/wjp_edgebars.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot a Horizontal Edgebars Chart following WJP style guidelines — wjp_edgebars","text":"ggplot object representing edge bars plot.","code":""},{"path":"https://ctoruno.github.io/WJPr/reference/wjp_edgebars.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot a Horizontal Edgebars Chart following WJP style guidelines — wjp_edgebars","text":"","code":"if (FALSE) { # \\dontrun{ data <- data.frame(   y_value = c(30, 50, 20),   x_var = c(\"Category A\", \"Category B\", \"Category C\"),   label_var = c(\"Label A\", \"Label B\", \"Label C\") )  wjp_edgebars(data, \"y_value\", \"x_var\", \"label_var\") } # }"},{"path":"https://ctoruno.github.io/WJPr/reference/wjp_gauge.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot a Gauge Chart following WJP style guidelines — wjp_gauge","title":"Plot a Gauge Chart following WJP style guidelines — wjp_gauge","text":"function creates gauge chart using ggplot2 based provided data frame.","code":""},{"path":"https://ctoruno.github.io/WJPr/reference/wjp_gauge.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot a Gauge Chart following WJP style guidelines — wjp_gauge","text":"","code":"wjp_gauge(   data,   target,   colors,   cvec = NULL,   factor_order = NULL,   labels = NULL,   crop = c(-10, 0, 0, -8),   ptheme = WJP_theme() )"},{"path":"https://ctoruno.github.io/WJPr/reference/wjp_gauge.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot a Gauge Chart following WJP style guidelines — wjp_gauge","text":"data data frame containing data plotted. target string specifying variable data frame contains values plotted. colors string specifying variable data frame represents color groupings segments. cvec vector colors apply segments. factor_order vector specifying order segments plotted. labels string specifying variable data frame contains labels displayed. Default NULL. crop numeric vector specifying amount space crop Top, Right, Bottom, Right margins, respectively. Default c(-10,0,0,-8). ptheme ggplot2 theme object applied plot. Default WJP_theme().","code":""},{"path":"https://ctoruno.github.io/WJPr/reference/wjp_gauge.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot a Gauge Chart following WJP style guidelines — wjp_gauge","text":"ggplot object representing gauge chart.","code":""},{"path":"https://ctoruno.github.io/WJPr/reference/wjp_gauge.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot a Gauge Chart following WJP style guidelines — wjp_gauge","text":"","code":"if (FALSE) { # \\dontrun{ data <- data.frame(   target = c(10, 20, 30, 40),   colors = c(\"red\", \"blue\", \"green\", \"yellow\"),   labels = c(\"A\", \"B\", \"C\", \"D\") ) cvec <- c(\"red\", \"blue\", \"green\", \"yellow\")  wjp_gauge(data, \"target\", \"colors\", cvec, labels = \"labels\") } # }"},{"path":"https://ctoruno.github.io/WJPr/reference/wjp_lines.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot a Line Chart following WJP style guidelines — wjp_lines","title":"Plot a Line Chart following WJP style guidelines — wjp_lines","text":"wjp_lines() takes data frame specific data structure (usually long shaped) returns ggplot object line chart following WJP style guidelines.","code":""},{"path":"https://ctoruno.github.io/WJPr/reference/wjp_lines.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot a Line Chart following WJP style guidelines — wjp_lines","text":"","code":"wjp_lines(   data,   target,   grouping,   ngroups,   colors,   cvec = NULL,   labels = NULL,   repel = F,   transparency = F,   transparencies = NULL,   custom.axis = F,   x.breaks = NULL,   x.labels = NULL,   sec.ticks = NULL,   ptheme = WJP_theme() )"},{"path":"https://ctoruno.github.io/WJPr/reference/wjp_lines.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot a Line Chart following WJP style guidelines — wjp_lines","text":"data Data frame containing data plot target String. Column name variable supply values plot. grouping String. Column name variable supplies grouping values (X-Axis). ngroups Vector containing groups lines. single group, please input c = (1). colors String. Column name variable contains color grouping. cvec Named vector colors apply line. labels String. Column name variable containing value labels display plot. repel Boolean. TRUE, function apply ggrepel package repel labels. Default FALSE. transparency Boolean. TRUE, function apply different opacities patterns. Default FALSE. transparencies Named vector different opacities apply line. custom.axis Boolean. TRUE, x.breaks x.labels passed ggplot theme. Default FALSE. x.breaks Numeric vector custom breaks X-Axis. x.labels Character vector labels x-axis. length x.breaks. sec.ticks Numeric vector containing minor breaks plot X-Axis. ptheme ggplot theme function apply plot. default, function applies WJP_theme()","code":""},{"path":"https://ctoruno.github.io/WJPr/reference/wjp_lines.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot a Line Chart following WJP style guidelines — wjp_lines","text":"ggplot object","code":""},{"path":"https://ctoruno.github.io/WJPr/reference/wjp_lines.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot a Line Chart following WJP style guidelines — wjp_lines","text":"","code":"# Always load the WJP fonts if not passing a custom theme to function wjp_fonts()  # Preparing data gpp_data <- WJPr::gpp  data4lines <- gpp_data %>% filter(   country == \"Atlantis\" ) %>%   select(year, q1a, q1b, q1c) %>%   mutate(     across(       !year,       \\(x) as.double(x)     ),     across(       !year,       ~case_when(         .x <= 2  ~ 1,         .x <= 4  ~ 0,         .x == 99 ~ NA_real_       )     ),     year = as.character(year)   ) %>%   group_by(year) %>%   summarise(     across(       everything(),       \\(x) mean(x, na.rm = TRUE)     ),     .groups = \"keep\"   ) %>%   mutate(     across(       everything(),       \\(x) x*100     )   ) %>%   pivot_longer(     !year,     names_to  = \"variable\",     values_to = \"percentage\"    ) %>%   mutate(     institution = case_when(       variable == \"q1a\" ~ \"Institution A\",       variable == \"q1b\" ~ \"Institution B\",       variable == \"q1c\" ~ \"Institution C\"     ),     value_label = paste0(       format(         round(percentage, 0),         nsmall = 0       ),       \"%\"     )   ) #> Error in mutate(., across(!year, function(x) as.double(x)), across(!year,     ~case_when(.x <= 2 ~ 1, .x <= 4 ~ 0, .x == 99 ~ NA_real_)),     year = as.character(year)): ℹ In argument: `across(!year, function(x) as.double(x))`. #> Caused by error in `across()`: #> ! Can't compute column `q1a`. #> Caused by error in `as.double()`: #> ! Can't convert `x` <haven_labelled> to <double>.    # Plotting chart  wjp_lines(   data4lines %>% filter(institution == \"Institution A\"),                       target         = \"percentage\",                grouping       = \"year\",   ngroups        = 1,                    colors         = \"institution\",   cvec           = c(\"Institution A\" = \"#08605F\"),   labels         = \"value_label\"  ) #> Error: object 'data4lines' not found"},{"path":"https://ctoruno.github.io/WJPr/reference/wjp_radar.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot a Radar Chart following WJP style guidelines — wjp_radar","title":"Plot a Radar Chart following WJP style guidelines — wjp_radar","text":"#' @description wjp_radar() takes data frame specific data structure (usually long shaped) returns ggplot object radar chart following WJP style guidelines.","code":""},{"path":"https://ctoruno.github.io/WJPr/reference/wjp_radar.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot a Radar Chart following WJP style guidelines — wjp_radar","text":"","code":"wjp_radar(   data,   axis_var,   target_var,   label_var,   color_var,   colors,   order_var,   maincat,   source = \"GPP\" )"},{"path":"https://ctoruno.github.io/WJPr/reference/wjp_radar.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot a Radar Chart following WJP style guidelines — wjp_radar","text":"data data frame containing data plotted. axis_var string specifying variable data frame contains groups axis. target_var string specifying variable data frame contains values plotted. label_var string specifying variable data frame contains labels displayed. color_var string specifying variable data frame contains color groupings. colors vector colors apply lines. first color applied percentages labels. order_var string specifying variable data frame contains display order categories. maincat string indicating category labels show radar. source string can take two values (GPP QRQ).","code":""},{"path":"https://ctoruno.github.io/WJPr/reference/wjp_radar.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot a Radar Chart following WJP style guidelines — wjp_radar","text":"ggplot object representing radar plot.","code":""},{"path":"https://ctoruno.github.io/WJPr/reference/wjp_radar.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot a Radar Chart following WJP style guidelines — wjp_radar","text":"","code":"if (FALSE) { # \\dontrun{ data <- data.frame(   axis_var = rep(letters[1:5], each = 3),   target_var = runif(15, 0, 1),   label_var = rep(LETTERS[1:5], each = 3),   order_var = rep(1:5, each = 3),   year = rep(2020:2022, 5) ) colors <- c(\"red\", \"blue\", \"green\") maincat <- 2022  wjp_radar(data, \"axis_var\", \"target_var\", \"label_var\", \"order_var\", colors, maincat) } # }"},{"path":"https://ctoruno.github.io/WJPr/reference/wjp_slope.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot a Slope Chart following WJP style guidelines — wjp_slope","title":"Plot a Slope Chart following WJP style guidelines — wjp_slope","text":"wjp_slope() takes data frame specific data structure (usually long shaped) returns ggplot object slope chart following WJP style guidelines.","code":""},{"path":"https://ctoruno.github.io/WJPr/reference/wjp_slope.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot a Slope Chart following WJP style guidelines — wjp_slope","text":"","code":"wjp_slope(   data,   target,   grouping,   ngroups,   colors,   cvec = NULL,   labels = NULL,   repel = FALSE,   ptheme = WJP_theme() )"},{"path":"https://ctoruno.github.io/WJPr/reference/wjp_slope.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot a Slope Chart following WJP style guidelines — wjp_slope","text":"data Data frame containing data plot target String. Column name variable supply values plot. grouping String. Column name variable supplies grouping values (X-Axis). ngroups Vector containing groups lines. single group, please input c = (1). colors String. Column name variable contains color grouping. cvec Named vector colors apply line. labels String. Column name variable containing value labels display plot. Default NULL. repel Boolean. TRUE, function apply ggrepel package repel labels. Default FALSE. ptheme ggplot theme function apply plot. default, function applies WJP_theme()","code":""},{"path":"https://ctoruno.github.io/WJPr/reference/wjp_slope.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot a Slope Chart following WJP style guidelines — wjp_slope","text":"ggplot object","code":""},{"path":"https://ctoruno.github.io/WJPr/reference/wjp_slope.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot a Slope Chart following WJP style guidelines — wjp_slope","text":"","code":"# Always load the WJP fonts if not passing a custom theme to function wjp_fonts()  # Preparing data gpp_data <- WJPr::gpp  data4slopes <- gpp_data %>% select(year, gend, q1a) %>%   filter(     year %in% c(2017, 2019)   ) %>%   mutate(     q1a = as.double(q1a),     trust = case_when(       q1a <= 2  ~ 1,       q1a <= 4  ~ 0     ),     gender = case_when(       gend == 1 ~ \"Male\",       gend == 2 ~ \"Female\"     )   ) %>%   group_by(year, gender) %>%   summarise(     trust = mean(trust, na.rm = T)*100,     .groups = \"keep\"   ) %>%   mutate(     value_label = paste0(       format(         round(trust, 0),         nsmall = 0       ),       \"%\"     )   ) #> Error in mutate(., q1a = as.double(q1a), trust = case_when(q1a <= 2 ~     1, q1a <= 4 ~ 0), gender = case_when(gend == 1 ~ \"Male\",     gend == 2 ~ \"Female\")): ℹ In argument: `q1a = as.double(q1a)`. #> Caused by error in `as.double()`: #> ! Can't convert `x` <haven_labelled> to <double>.  # Plotting chart wjp_slope(   data4slopes,                       target    = \"trust\",                grouping  = \"year\",   ngroups   = data4slopes$gender,                    labels    = \"value_label\",   colors    = \"gender\",   cvec      = c(\"Male\"   = \"#08605F\",                 \"Female\" = \"#9E6240\"),   repel     = TRUE ) #> Error: object 'data4slopes' not found"},{"path":"https://ctoruno.github.io/WJPr/news/index.html","id":"wjpr-100","dir":"Changelog","previous_headings":"","what":"WJPr 1.0.0","title":"WJPr 1.0.0","text":"Fixed bugs preventing wjp_radar() plot specific data structures. Fixed bugs preventing wjp_dots() plot specific data structures. Change way wjp_dots() calculated added Confidence Intervals charts. wjp_slope() added. diff_means() added.","code":""},{"path":"https://ctoruno.github.io/WJPr/news/index.html","id":"wjpr-000","dir":"Changelog","previous_headings":"","what":"WJPr 0.0.0","title":"WJPr 0.0.0","text":"Initial base release","code":""}]
