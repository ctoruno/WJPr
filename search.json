[{"path":"https://ctoruno.github.io/WJPr/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 WJPr authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":[]},{"path":"https://ctoruno.github.io/WJPr/articles/dataviz.html","id":"preparing-the-data","dir":"Articles","previous_headings":"Bar Charts","what":"Preparing the data","title":"Data Visualization with WJPr","text":"begin plotting simple vertical chart. comes GPP data, usually plot percentages response groups respondents. task, try plot percentage respondents country GPP dataset lot trust Institution . given percentage people answered 1 o 2 question Q1A. Therefore, proceed wrangle data reflect :","code":"data4bars <- gpp_data %>%   select(country, year, q1a) %>%   group_by(country, year) %>%   mutate(     q1a = as.double(q1a),     trust = case_when(       q1a <= 2  ~ 1,       q1a <= 4  ~ 0,       q1a == 99 ~ NA_real_     ),     year = as.character(year)   ) %>%   summarise(     trust   = mean(trust, na.rm = TRUE),     .groups = \"keep\"   ) %>%   mutate(     trust = trust*100   ) %>%   filter(year == \"2022\")  kbl(data4bars)"},{"path":"https://ctoruno.github.io/WJPr/articles/dataviz.html","id":"simple-vertical-chart","dir":"Articles","previous_headings":"Bar Charts","what":"Simple vertical chart","title":"Data Visualization with WJPr","text":"data ready, begin plotting simple vertical chart GPP data. just need specify names columns contain values plotted Y-Axis (target) variable containing categories displayed X-Axis (grouping).","code":"wjp_bars(     data4bars,                   target    = \"trust\",             grouping  = \"country\"     )"},{"path":"https://ctoruno.github.io/WJPr/articles/dataviz.html","id":"controlling-color","dir":"Articles","previous_headings":"Bar Charts","what":"Controlling color","title":"Data Visualization with WJPr","text":"can specify colors used using colors cvec parameters. colors parameter contain name column distinguish different colors, , cvec parameter pass named vector linking specific values specific colors. following example, want bars cool gray color, therefore, use column “year” color parameter pass named vector specify values associated year “2002” color code equal “#8789C0”.  prefer different color per country, need create new column given already using column grouping var. following example, first create new column called “color_variable” containing values columns “country”","code":"wjp_bars(     data4bars,                   target    = \"trust\",             grouping  = \"country\",     colors    = \"year\",     cvec      = c(\"2022\" = \"#8789C0\") ) data4bars <- data4bars %>%   mutate(     color_variable = country   )  wjp_bars(     data4bars,                   target    = \"trust\",             grouping  = \"country\",     colors    = \"color_variable\",     cvec      = c(\"Atlantis\"  = \"#2E4057\",                   \"Narnia\"    = \"#083D77\",                   \"Neverland\" = \"#F4D35E\") )"},{"path":"https://ctoruno.github.io/WJPr/articles/dataviz.html","id":"adding-value-labels","dir":"Articles","previous_headings":"Bar Charts","what":"Adding value labels","title":"Data Visualization with WJPr","text":"want add value labels chart, can make use labels lab_pos parameters. first one contains name column contains specific labels displayed. Given target parameter might lot decimals, usually create string label rounding values plotted Y-Axis. specific value labels, might also need specify specifically like labels displayed. following example, create two columns: “value_label” “label_position”, place labels 5 percentage points top limit bars:","code":"data4bars <- data4bars %>%   mutate(     value_label = paste0(       format(         round(trust, 0),         nsmall = 0       ),       \"%\"     ),     label_position = trust + 5   )  wjp_bars(     data4bars,                   target    = \"trust\",             grouping  = \"country\",     labels    = \"value_label\",     lab_pos   = \"label_position\",     colors    = \"color_variable\",     cvec      = c(\"Atlantis\"  = \"#2E4057\",                   \"Narnia\"    = \"#083D77\",                   \"Neverland\" = \"#F4D35E\") )"},{"path":"https://ctoruno.github.io/WJPr/articles/dataviz.html","id":"switch-to-horizontal-bars","dir":"Articles","previous_headings":"Bar Charts","what":"Switch to horizontal bars","title":"Data Visualization with WJPr","text":"default, plotted bars vertical. However, making horizontal bars plot easy setting direction parameter “horizontal”.","code":"wjp_bars(     data4bars,                   target    = \"trust\",             grouping  = \"country\",     labels    = \"value_label\",     lab_pos   = \"label_position\",     colors    = \"color_variable\",     cvec      = c(\"Atlantis\"  = \"#2E4057\",                   \"Narnia\"    = \"#083D77\",                   \"Neverland\" = \"#F4D35E\"),     direction = \"horizontal\" )"},{"path":"https://ctoruno.github.io/WJPr/articles/dataviz.html","id":"stacked-bars","dir":"Articles","previous_headings":"","what":"Stacked Bars","title":"Data Visualization with WJPr","text":"can also use wjp_bars() function plot stacked bars. Let’s assume , instead plotting percentage people stated “lot” “” trust Institution , prefer plot percentage people selected every possible answer country. First, need modify data reflect changes follows: Pay attention transformed “q1a” column factor variable defined specific levels (order) answers. specifying factor levels, taking control answer plotted. don’t specify factor levels, answers plotted alphabetical order, want given variable interest ordered categorical variable. modified data fit new design bar chart, proceed use wjp_bars() function showed time, set stacked parameter TRUE:","code":"data4bars <- gpp_data %>%   filter(     year == 2022   ) %>%   select(country, q1a) %>%   mutate(     q1a  = case_when(       q1a == 1  ~ \"A lot\",       q1a == 2  ~ \"Some\",       q1a == 3  ~ \"Little\",       q1a == 4  ~ \"None\",       q1a == 99 ~ \"No answer\",     ),     q1a = factor(       q1a,        levels = c(\"A lot\", \"Some\", \"Little\", \"None\", \"No answer\")     )   ) %>%   group_by(country, q1a) %>%   count() %>%   group_by(country) %>%   arrange(country, desc(q1a)) %>%   mutate(     total       = sum(n),     percentage  = (n/total)*100,     value_label = paste0(       format(         round(percentage, 1),         nsmall = 1       ),       \"%\"     ),     value_label = if_else(percentage >= 5, value_label, NA_character_),     label_position = cumsum(percentage)-(percentage/2)   ) %>%   select(     country, q1a, percentage, value_label, label_position   )  kbl(data4bars) stacked_bar <- wjp_bars(     data4bars,                   target    = \"percentage\",             grouping  = \"country\",     labels    = \"value_label\",     lab_pos   = \"label_position\",     colors    = \"q1a\",     cvec      = c(\"A lot\"     = \"#32382E\",                   \"Some\"      = \"#899878\",                   \"Little\"    = \"#E4E6C3\",                   \"None\"      = \"#BF4342\",                   \"No answer\" = \"#858585\"),     direction = \"horizontal\",     stacked   = TRUE )  stacked_bar"},{"path":"https://ctoruno.github.io/WJPr/articles/dataviz.html","id":"diverging-bars-charts","dir":"Articles","previous_headings":"","what":"Diverging Bars Charts","title":"Data Visualization with WJPr","text":"Diverging bars specific type bar chart. However, use negative part cartesian plane plot additional information. Let’s go back prior example displaying levels trust people sample Institution . use diverging bars plot percentage people answered “lot” “” one side, percentage people answered “Little” “None” . , need wrangle data little bit different: Please pay attention create variable called “direction” distinguish direction values plotted. Values associated “negative” direction turned negative numbers. data proceed use wjp_divbars() function. parameters used way: target contains column name values plotted bars. grouping contains column name categorical groupings. cvec contains named vector linking values specific color codes. labels contains column name value labels displayed, . Besides familiar parameters, wjp_divbars() two unique ones required function work. First, need set diverging parameter contain column name used distinguish direction values, well negative parameter, contains exact value distinguishes negative values positive values within diverging variable.","code":"data4divbars <- gpp_data %>%   filter(     year == 2022   ) %>%   select(country, q1a) %>%   mutate(     q1a  = case_when(       q1a <= 2  ~ \"Trust\",       q1a <= 4  ~ \"No Trust\"     )   ) %>%   group_by(country, q1a) %>%   count() %>%   filter(     !is.na(q1a)   ) %>%   group_by(country) %>%   mutate(     total       = sum(n),     percentage  = (n/total)*100,     value_label = paste0(       format(         round(percentage, 1),         nsmall = 1       ),       \"%\"     ),     value_label    = if_else(percentage >= 5,                               value_label,                               NA_character_),     direction      = if_else(q1a == \"Trust\",                               \"positive\",                               \"negative\"),     percentage     = if_else(direction == \"negative\",                               percentage*-1,                               percentage),     label_position = (percentage/2)   ) %>%   select(     country, q1a, percentage, value_label, label_position, direction   )  kbl(data4divbars) wjp_divbars(     data4divbars,                  target      = \"percentage\",            grouping    = \"country\",              diverging   = \"q1a\",          negative    = \"negative\",        cvec        = c(\"Trust\"     = \"#4F518C\",                     \"No Trust\"  = \"#2C2A4A\"),     labels      = \"value_label\" )"},{"path":"https://ctoruno.github.io/WJPr/articles/dataviz.html","id":"line-charts","dir":"Articles","previous_headings":"","what":"Line Charts","title":"Data Visualization with WJPr","text":"Line charts excellent choice display evolution values time. can use wjp_lines() function draw line chart. Let’s assume now want focus evolution time percentage people “lot” “” trust Institution Atlantis. First, need wrangle data fit new design: aware ’m also leaving trust Institution B Institution C pivoting data frame long format. However, start plotting percentage people trust Institution time. , proceed use wjp_lines() function. parameters used way: target contains column name values plotted bars. grouping contains column name categorical groupings. line charts, parameter refers years. colors contains column name distinguish different colors line chart. cvec contains named vector linking values specific color codes. labels contains column name value labels displayed, . Besides parameters, wjp_lines() function also requires set ngroups parameter. way setting parameter depends number groups. just plotting single line just like example bellow, input ngroups = 1:  Iif plotting multiple lines, need specify full column contains groups example bellow. Please also notice setting repel = TRUE value labels overlap . However, need ggrepel package loaded memory.","code":"data4lines <- gpp_data %>%   filter(     country == \"Atlantis\"   ) %>%   select(year, q1a, q1b, q1c) %>%   mutate(     across(       !year,       \\(x) as.double(x)     ),     across(       !year,       ~case_when(         .x <= 2  ~ 1,         .x <= 4  ~ 0,         .x == 99 ~ NA_real_       )     ),     year = as.character(year)   ) %>%   group_by(year) %>%   summarise(     across(       everything(),       \\(x) mean(x, na.rm = TRUE)     ),     .groups = \"keep\"   ) %>%   mutate(     across(       everything(),       \\(x) x*100     )   ) %>%   pivot_longer(     !year,     names_to  = \"variable\",     values_to = \"percentage\"    ) %>%   mutate(     institution = case_when(       variable == \"q1a\" ~ \"Institution A\",       variable == \"q1b\" ~ \"Institution B\",       variable == \"q1c\" ~ \"Institution C\"     ),     value_label = paste0(       format(         round(percentage, 0),         nsmall = 0       ),       \"%\"     )   )  kbl(data4lines) wjp_lines(     data4lines %>% filter(institution == \"Institution A\"),                         target         = \"percentage\",                  grouping       = \"year\",     ngroups        = 1,                      colors         = \"institution\",     cvec           = c(\"Institution A\" = \"#08605F\"),     labels         = \"value_label\" ) library(ggrepel) wjp_lines(     data4lines,                         target         = \"percentage\",                  grouping       = \"year\",     ngroups        = data4lines$institution,                      colors         = \"institution\",     cvec           = c(\"Institution A\" = \"#08605F\",                        \"Institution B\" = \"#9E6240\",                        \"Institution C\" = \"#2E0E02\"),     labels         = \"value_label\",     repel          = TRUE )"},{"path":"https://ctoruno.github.io/WJPr/articles/dataviz.html","id":"controlling-opacities","dir":"Articles","previous_headings":"Line Charts","what":"Controlling opacities","title":"Data Visualization with WJPr","text":"wjp_lines() function special feature can add special highlight certain lines assigning different levels opacity different lines. Let’s say want highlight line representing trust levels Institution . start setting transparency = TRUE pass named vector opacity levels want assign different lines transparencies parameter. Please note named vector needs based using values used color vector.","code":"wjp_lines(     data4lines,                         target         = \"percentage\",                  grouping       = \"year\",     ngroups        = data4lines$institution,                      colors         = \"institution\",     cvec           = c(\"Institution A\" = \"#08605F\",                        \"Institution B\" = \"#9E6240\",                        \"Institution C\" = \"#2E0E02\"),     labels         = \"value_label\",     repel          = TRUE,     transparency   = TRUE,     transparencies = c(\"Institution A\" = 1.00,                        \"Institution B\" = 0.25,                        \"Institution C\" = 0.25) )"},{"path":"https://ctoruno.github.io/WJPr/articles/dataviz.html","id":"controlling-the-order-of-the-bars","dir":"Articles","previous_headings":"","what":"Controlling the order of the bars","title":"Data Visualization with WJPr","text":"Sometimes, might want control order show elements charts. plotting functions WJPr package include custom_order order parameter. Let’s say want customize diverging bars showed present bars following specific order: Neverland (1), Atlantis (2), Narnia (3). , begin setting custom_order TRUE adding new column data specific order elements:","code":"data4divbars <- data4divbars %>%   mutate(     order_no = case_when(       country == \"Neverland\" ~ 1,       country == \"Atlantis\"  ~ 2,       country == \"Narnia\"    ~ 3     )   )  wjp_divbars(     data4divbars,                  target       = \"percentage\",            grouping     = \"country\",              diverging    = \"q1a\",          negative     = \"negative\",        cvec         = c(\"Trust\"     = \"#4F518C\",                      \"No Trust\"  = \"#2C2A4A\"),     labels       = \"value_label\",     custom_order = TRUE,     order        = \"order_no\"  )"},{"path":"https://ctoruno.github.io/WJPr/articles/dataviz.html","id":"adding-more-customizations","dir":"Articles","previous_headings":"","what":"Adding more customizations","title":"Data Visualization with WJPr","text":"plotting functions WJPr package return ggplot object. means , knowledge ggplot, user can customize plot returned plotting function. example, let’s say want customize stacked bars completely remove panel grid add title subtitle . can using labs() theme() functions ggplot2 package shown bellow:","code":"stacked_bar +   labs(     title    = \"Trust in Institution A\",     subtitle = \"Percentage of people who has a lot, some, little, or no trust in Institution A\"   ) +   theme(     axis.text.x         = element_blank(),     panel.grid.major.x  = element_blank(),     plot.title.position = \"plot\",     plot.subtitle       = element_text(face = \"italic\")   )"},{"path":"https://ctoruno.github.io/WJPr/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Carlos . Toruno Paniagua. Author, maintainer.","code":""},{"path":"https://ctoruno.github.io/WJPr/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Toruno Paniagua C (2024). WJPr: World Justice Project data visualizations tools. R package version 1.0.0, https://ctoruno.github.io/WJPr/, https://github.com/ctoruno/WJPr.","code":"@Manual{,   title = {WJPr: World Justice Project data and visualizations tools},   author = {Carlos A. {Toruno Paniagua}},   year = {2024},   note = {R package version 1.0.0, https://ctoruno.github.io/WJPr/},   url = {https://github.com/ctoruno/WJPr}, }"},{"path":"https://ctoruno.github.io/WJPr/index.html","id":"wjpr","dir":"","previous_headings":"","what":"World Justice Project data and visualizations tools","title":"World Justice Project data and visualizations tools","text":"WJPr R package developed streamline data analysis visualization Data Analytics Unit World Justice Project (WJP). package includes essential data tools replicating visualizations WJP Country Reports analyzing Rule Law Index scores.","code":""},{"path":"https://ctoruno.github.io/WJPr/index.html","id":"features","dir":"","previous_headings":"","what":"Features","title":"World Justice Project data and visualizations tools","text":"Version 1.0.0 WJPr offers: wide range visualization functions recreate WJP Country Report charts, bar plots, line graphs, radar charts. Access Rule Law Index scores data, including detailed information factors subfactors. Streamlined tools generating publication-ready graphics.","code":""},{"path":"https://ctoruno.github.io/WJPr/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"World Justice Project data and visualizations tools","text":"WJPr hosted GitHub. install package, ensure devtools package installed use following commands:","code":"# Install WJPr from GitHub devtools::install_github(\"ctoruno/WJPr\")"},{"path":"https://ctoruno.github.io/WJPr/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"World Justice Project data and visualizations tools","text":"Load package R session:","code":"library(WJPr)"},{"path":"https://ctoruno.github.io/WJPr/index.html","id":"example-accessing-rule-of-law-index-data","dir":"","previous_headings":"Usage","what":"Example: Accessing Rule of Law Index Data","title":"World Justice Project data and visualizations tools","text":"package provides built-datasets analysis:","code":"# View the first few rows of the dataset head(WJPr::gpp)"},{"path":"https://ctoruno.github.io/WJPr/index.html","id":"example-creating-a-visualization","dir":"","previous_headings":"Usage","what":"Example: Creating a Visualization","title":"World Justice Project data and visualizations tools","text":"example use WJPr create bar chart:","code":"# Always load the WJP fonts if not passing a custom theme to function wjp_fonts()  # Loading data gpp_data <- WJPr::gpp  # Prepare the data data4bars <- gpp_data %>%   select(country, year, q1a) %>%   group_by(country, year) %>%   mutate(     q1a = as.double(q1a),     trust = case_when(       q1a <= 2  ~ 1,       q1a <= 4  ~ 0,       q1a == 99 ~ NA_real_     ),     year = as.character(year)   ) %>%   summarise(     trust   = mean(trust, na.rm = TRUE),     .groups = \"keep\"   ) %>%   mutate(     trust = trust*100   ) %>%   filter(year == \"2022\")  # Draw the chart wjp_bars(     data4bars,                   target    = \"trust\",             grouping  = \"country\",     colors    = \"year\",     cvec      = c(\"2022\" = \"#8789C0\") )"},{"path":"https://ctoruno.github.io/WJPr/index.html","id":"documentation","dir":"","previous_headings":"","what":"Documentation","title":"World Justice Project data and visualizations tools","text":"Comprehensive documentation available functions datasets. Use R help system access :","code":"?WJPr::wjp_lines"},{"path":"https://ctoruno.github.io/WJPr/index.html","id":"contributing","dir":"","previous_headings":"","what":"Contributing","title":"World Justice Project data and visualizations tools","text":"Contributions welcome! suggestions, bug reports, new feature ideas, please open issue submit pull request GitHub.","code":""},{"path":"https://ctoruno.github.io/WJPr/index.html","id":"license","dir":"","previous_headings":"","what":"License","title":"World Justice Project data and visualizations tools","text":"project licensed MIT License. See LICENSE.md file details.","code":""},{"path":"https://ctoruno.github.io/WJPr/index.html","id":"acknowledgments","dir":"","previous_headings":"","what":"Acknowledgments","title":"World Justice Project data and visualizations tools","text":"WJPr developed Data Analytics Unit World Justice Project. Special thanks whole team invaluable input creating package.","code":""},{"path":"https://ctoruno.github.io/WJPr/reference/WJPr-package.html","id":null,"dir":"Reference","previous_headings":"","what":"WJPr: World Justice Project data and visualizations tools — WJPr-package","title":"WJPr: World Justice Project data and visualizations tools — WJPr-package","text":"WJPr package contains important data visualization tools used Data Analytics Unit World Justice Project. Version 1.0.0 comes wide range visualization functions replicating image charts Country Reports. Additionally, can find Rule Law Index scores data factors subfactors complementary data.","code":""},{"path":[]},{"path":"https://ctoruno.github.io/WJPr/reference/WJPr-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"WJPr: World Justice Project data and visualizations tools — WJPr-package","text":"Maintainer: Carlos . Toruno Paniagua ctoruno@worldjusticeproject.org","code":""},{"path":"https://ctoruno.github.io/WJPr/reference/gpp.html","id":null,"dir":"Reference","previous_headings":"","what":"GPP sample data — gpp","title":"GPP sample data — gpp","text":"subset data original General Population Poll Data. Countries years renamed group three fictional countries years.","code":""},{"path":"https://ctoruno.github.io/WJPr/reference/gpp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"GPP sample data — gpp","text":"","code":"gpp"},{"path":[]},{"path":"https://ctoruno.github.io/WJPr/reference/gpp.html","id":"gpp","dir":"Reference","previous_headings":"","what":"gpp","title":"GPP sample data — gpp","text":"data frame 750 rows 19 columns: country Country name year Year gend Gender age Age q1x Trust X institution q49x Justice System evaluation","code":""},{"path":"https://ctoruno.github.io/WJPr/reference/gpp.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"GPP sample data — gpp","text":"https://worldjusticeproject.org/","code":""},{"path":"https://ctoruno.github.io/WJPr/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://ctoruno.github.io/WJPr/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://ctoruno.github.io/WJPr/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"https://ctoruno.github.io/WJPr/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling rhs(lhs).","code":""},{"path":"https://ctoruno.github.io/WJPr/reference/roli.html","id":null,"dir":"Reference","previous_headings":"","what":"Rule of Law Index Historical Data — roli","title":"Rule of Law Index Historical Data — roli","text":"Index scores, country-year level, factors subfactors 2012 2023.","code":""},{"path":"https://ctoruno.github.io/WJPr/reference/roli.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rule of Law Index Historical Data — roli","text":"","code":"roli"},{"path":[]},{"path":"https://ctoruno.github.io/WJPr/reference/roli.html","id":"roli","dir":"Reference","previous_headings":"","what":"roli","title":"Rule of Law Index Historical Data — roli","text":"data frame 1,199 rows 57 columns: country Country name year Year roli Rule Law Index Score f1, f2, f3, f4, f5, f6, f7, f8 Factor scores sfxx Subfactor scores","code":""},{"path":"https://ctoruno.github.io/WJPr/reference/roli.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Rule of Law Index Historical Data — roli","text":"https://worldjusticeproject.org/","code":""},{"path":"https://ctoruno.github.io/WJPr/reference/wjp_bars.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot a Bar Chart following WJP style guidelines — wjp_bars","title":"Plot a Bar Chart following WJP style guidelines — wjp_bars","text":"wjp_bars() takes data frame specific data structure (usually long shaped) returns ggplot object bar chart following WJP style guidelines.","code":""},{"path":"https://ctoruno.github.io/WJPr/reference/wjp_bars.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot a Bar Chart following WJP style guidelines — wjp_bars","text":"","code":"wjp_bars(   data,   target,   grouping,   labels = NULL,   colors = NULL,   cvec = NULL,   direction = \"vertical\",   stacked = FALSE,   lab_pos = NULL,   expand = FALSE,   order = NULL,   width = 0.9,   ptheme = WJP_theme() )"},{"path":"https://ctoruno.github.io/WJPr/reference/wjp_bars.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot a Bar Chart following WJP style guidelines — wjp_bars","text":"data Data frame containing data plot target String. Column name variable supply values plot. grouping String. Column name variable supplies grouping values. Values can grouped either X- Y- Axis. labels String. Column name variable containing value labels display plot. Default NULL. colors String. Column name variable contains color grouping. Default NULL. cvec Named vector colors apply bars. Vector names values specified \"colors\" variables, vector values direction String. bars plotted \"horizontal\" \"vertical\" way? Default \"vertical\". stacked Boolean. TRUE, bars stacked top per group. Default FALSE. lab_pos String. Column name variable contains coordinates value labels. Default NULL. expand Boolean. TRUE, plot give extra space value labels. Default FALSE. order String. Column name variable contains custom order labels. width Numeric value 0 1. Width bars percentage space bar. Default 0.9. ptheme ggplot theme function apply plot. default, function applies WJP_theme()","code":""},{"path":"https://ctoruno.github.io/WJPr/reference/wjp_bars.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot a Bar Chart following WJP style guidelines — wjp_bars","text":"ggplot object","code":""},{"path":"https://ctoruno.github.io/WJPr/reference/wjp_bars.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot a Bar Chart following WJP style guidelines — wjp_bars","text":"","code":"# Always load the WJP fonts (optional) wjp_fonts()  # Preparing data gpp_data <- WJPr::gpp  data4bars <- gpp_data %>%   select(country, year, q1a) %>%   group_by(country, year) %>%   mutate(     q1a = as.double(q1a),     trust = case_when(       q1a <= 2  ~ 1,       q1a <= 4  ~ 0,       q1a == 99 ~ NA_real_     ),     year = as.character(year)   ) %>%   summarise(     trust   = mean(trust, na.rm = TRUE),     .groups = \"keep\"   ) %>%   mutate(     trust = trust*100   ) %>%   filter(year == \"2022\") %>%   mutate(     color_variable = country,     value_label = paste0(       format(         round(trust, 0),         nsmall = 0       ),       \"%\"     ),     label_position = trust + 5   ) #> Error in gpp_data %>% select(country, year, q1a) %>% group_by(country,     year) %>% mutate(q1a = as.double(q1a), trust = case_when(q1a <=     2 ~ 1, q1a <= 4 ~ 0, q1a == 99 ~ NA_real_), year = as.character(year)) %>%     summarise(trust = mean(trust, na.rm = TRUE), .groups = \"keep\") %>%     mutate(trust = trust * 100) %>% filter(year == \"2022\") %>%     mutate(color_variable = country, value_label = paste0(format(round(trust,         0), nsmall = 0), \"%\"), label_position = trust + 5): could not find function \"%>%\"  # Plotting chart wjp_bars(   data4bars,                 target    = \"trust\",           grouping  = \"country\",   labels    = \"value_label\",   lab_pos   = \"label_position\",   colors    = \"color_variable\",   cvec      = c(\"Atlantis\"  = \"#2E4057\",                 \"Narnia\"    = \"#083D77\",                 \"Neverland\" = \"#F4D35E\")   ) #> Error in data %>% dplyr::rename(target_var = all_of(target), grouping_var = all_of(grouping),     labels_var = all_of(labels), colors_var = all_of(colors),     order_var = all_of(order)): could not find function \"%>%\""},{"path":"https://ctoruno.github.io/WJPr/reference/wjp_divbars.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot a Diverging Horizontal Bar Chart following WJP style guidelines — wjp_divbars","title":"Plot a Diverging Horizontal Bar Chart following WJP style guidelines — wjp_divbars","text":"wjp_divbars() takes data frame specific data structure (usually long shaped) returns ggplot object diverging horizontal bar chart following WJP style guidelines.","code":""},{"path":"https://ctoruno.github.io/WJPr/reference/wjp_divbars.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot a Diverging Horizontal Bar Chart following WJP style guidelines — wjp_divbars","text":"","code":"wjp_divbars(   data,   target,   grouping,   diverging,   negative = NULL,   cvec = NULL,   labels = NULL,   label_color = \"#ffffff\",   custom_order = F,   order = NULL,   ptheme = WJP_theme() )"},{"path":"https://ctoruno.github.io/WJPr/reference/wjp_divbars.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot a Diverging Horizontal Bar Chart following WJP style guidelines — wjp_divbars","text":"data Data frame containing data plot target String. Column name variable supply values plot. grouping String. Column name variable supplies grouping values (Y-Axis Labels). diverging String. Column name variable supplies diverging values. negative String. Value indicates bar negative quadrant. cvec Named vector colors apply bar segment. Default NULL. labels String. Column name variable supplies labels show plot. Default NULL. label_color String. Hex code use labels. custom_order Boolean. TRUE, plot expect custom order graph labels. Default FALSE. order String. Vector contains custom order y-axis labels. Default NULL. ptheme ggplot theme function apply plot. default, function applies WJP_theme()","code":""},{"path":"https://ctoruno.github.io/WJPr/reference/wjp_divbars.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot a Diverging Horizontal Bar Chart following WJP style guidelines — wjp_divbars","text":"ggplot object","code":""},{"path":"https://ctoruno.github.io/WJPr/reference/wjp_divbars.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot a Diverging Horizontal Bar Chart following WJP style guidelines — wjp_divbars","text":"","code":"# Always load the WJP fonts (optional) wjp_fonts()  # Preparing data data4divbars <- WJPr::gpp %>% filter(   year == 2022 ) %>%   select(country, q1a) %>%   mutate(     q1a  = case_when(       q1a <= 2  ~ \"Trust\",       q1a <= 4  ~ \"No Trust\"     )   ) %>%   group_by(country, q1a) %>%   count() %>%   filter(     !is.na(q1a)   ) %>%   group_by(country) %>%   mutate(     total       = sum(n),     percentage  = (n/total)*100,     value_label = paste0(       format(         round(percentage, 1),         nsmall = 1       ),       \"%\"     ),     value_label    = if_else(percentage >= 5,                               value_label,                               NA_character_),     direction      = if_else(q1a == \"Trust\",                               \"positive\",                               \"negative\"),     percentage     = if_else(direction == \"negative\",                               percentage*-1,                               percentage),     label_position = (percentage/2)   ) %>%   select(     country, q1a, percentage, value_label, label_position, direction   ) #> Error in WJPr::gpp %>% filter(year == 2022) %>% select(country, q1a) %>%     mutate(q1a = case_when(q1a <= 2 ~ \"Trust\", q1a <= 4 ~ \"No Trust\")) %>%     group_by(country, q1a) %>% count() %>% filter(!is.na(q1a)) %>%     group_by(country) %>% mutate(total = sum(n), percentage = (n/total) *     100, value_label = paste0(format(round(percentage, 1), nsmall = 1),     \"%\"), value_label = if_else(percentage >= 5, value_label,     NA_character_), direction = if_else(q1a == \"Trust\", \"positive\",     \"negative\"), percentage = if_else(direction == \"negative\",     percentage * -1, percentage), label_position = (percentage/2)) %>%     select(country, q1a, percentage, value_label, label_position,         direction): could not find function \"%>%\"  # Plotting chart wjp_divbars(   data4divbars,                target      = \"percentage\",          grouping    = \"country\",            diverging   = \"q1a\",        negative    = \"negative\",      cvec        = c(\"Trust\"     = \"#4F518C\",                   \"No Trust\"  = \"#2C2A4A\"),   labels      = \"value_label\" ) #> Error in data %>% rename(target_var = all_of(target), rows_var = all_of(grouping),     grouping_var = all_of(diverging), labels_var = all_of(labels),     order_var = any_of(order)): could not find function \"%>%\""},{"path":"https://ctoruno.github.io/WJPr/reference/wjp_dots.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot a Dots Chart following WJP style guidelines — wjp_dots","title":"Plot a Dots Chart following WJP style guidelines — wjp_dots","text":"wjp_dotsChart() takes data frame specific data structure (usually long shaped) returns ggplot object dots chart following WJP style guidelines.","code":""},{"path":"https://ctoruno.github.io/WJPr/reference/wjp_dots.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot a Dots Chart following WJP style guidelines — wjp_dots","text":"","code":"wjp_dots(   data,   target,   sample_size = NULL,   draw_ci = TRUE,   grouping,   labels,   cvec = NULL,   order = NULL,   diffOpac = F,   opacities = NULL,   diffShp = F,   shapes = NA,   ptheme = WJP_theme() )"},{"path":"https://ctoruno.github.io/WJPr/reference/wjp_dots.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot a Dots Chart following WJP style guidelines — wjp_dots","text":"data Data frame containing data plot target String. Column name variable supply values plot. sample_size (Optional) Integer. Supplies number observations drawing binomial confidence intervals. draw_ci Boolean. TRUE, draw binomial confidence interval target value parameter interest. grouping String. Column name variable supplies grouping values. plot show different color per group. labels String. Column name variable supplies Y-Axis labels show plot. cvec Named vector colors apply dots. Default NULL. order String. Column name variable contains custom order labels. diffOpac Boolean. TRUE, plot expect different levels opacities dots. Default FALSE. opacities Named vector opacity levels apply dots. Default NULL. diffShp Boolean. TRUE, plot expect different shapes dots. Default FALSE. shapes Named vector shapes displayed. Default NULL. ptheme ggplot theme function apply plot. default, function applies WJP_theme().","code":""},{"path":"https://ctoruno.github.io/WJPr/reference/wjp_dots.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot a Dots Chart following WJP style guidelines — wjp_dots","text":"ggplot object","code":""},{"path":"https://ctoruno.github.io/WJPr/reference/wjp_dots.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot a Dots Chart following WJP style guidelines — wjp_dots","text":"","code":"if (FALSE) { # \\dontrun{ # Always load the WJP fonts if not passing a custom theme to function wjp_fonts()  # Preparing data data2plot <- gpp %>%  select(country, q49a)%>%   mutate(div = case_when(     q49a == 1  ~ \"Very confident\",     q49a == 2  ~ \"Fairly confident\",     q49a == 3  ~ \"Not very confident\",     q49a == 4  ~ \"Not at all confident\",     q49a == 99 ~ NA_character_   )   )%>% drop_na()%>%   group_by(country, div)%>%   count()%>%   group_by(country)%>%   transmute(div, value2plot = n/sum(n)*100)%>%   mutate(order_value = case_when(     country == \"Atlantis\" ~ 1,     country == \"Narnia\" ~ 2,     country == \"Neverland\" ~ 3))  # Plotting chart wjp_dotsChart(data= data2plot, target = \"value2plot\", grouping = \"div\", order = \"order_value\", labels = \"country\") } # }"},{"path":"https://ctoruno.github.io/WJPr/reference/wjp_dumbbells.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot a Dumbbell Chart following WJP style guidelines — wjp_dumbbells","title":"Plot a Dumbbell Chart following WJP style guidelines — wjp_dumbbells","text":"wjp_dumbbells() takes data frame specific data structure (usually long shaped) returns ggplot object dumbbell chart following WJP style guidelines.","code":""},{"path":"https://ctoruno.github.io/WJPr/reference/wjp_dumbbells.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot a Dumbbell Chart following WJP style guidelines — wjp_dumbbells","text":"","code":"wjp_dumbbells(   data,   target,   rows,   color,   cgroups,   labels = NULL,   labpos = NULL,   cvec = NULL,   order = NULL,   ptheme = WJP_theme() )"},{"path":"https://ctoruno.github.io/WJPr/reference/wjp_dumbbells.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot a Dumbbell Chart following WJP style guidelines — wjp_dumbbells","text":"data data frame containing data plotted. target string specifying variable data frame contains numeric values plotted. rows string specifying variable data frame contains categories rows. color string specifying variable data frame indicates groups start end points. cgroups vector two strings specifying groups compared dumbbell plot. labels string specifying variable data frame contains text labels display. labpos string specifying variable data frame contains label positions. cvec vector colors apply points lines. Default NULL. order named vector specifying order categories. Default NULL. ptheme ggplot2 theme object applied plot. Default WJP_theme().","code":""},{"path":"https://ctoruno.github.io/WJPr/reference/wjp_dumbbells.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot a Dumbbell Chart following WJP style guidelines — wjp_dumbbells","text":"ggplot object representing dumbbell plot.","code":""},{"path":"https://ctoruno.github.io/WJPr/reference/wjp_dumbbells.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot a Dumbbell Chart following WJP style guidelines — wjp_dumbbells","text":"","code":"if (FALSE) { # \\dontrun{ data <- data.frame(   group = c(\"A\", \"B\", \"C\", \"A\", \"B\", \"C\"),   target = c(30, 50, 20, 40, 60, 30),   color = c(\"start\", \"start\", \"start\", \"end\", \"end\", \"end\") ) cgroups <- c(\"start\", \"end\") cvec <- c(\"#2a2a94\", \"#d1cfd1\")  wjp_dumbbells(data, \"target\", \"group\", \"color\", cgroups, cvec) } # }"},{"path":"https://ctoruno.github.io/WJPr/reference/wjp_edgebars.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot a Horizontal Edgebars Chart following WJP style guidelines — wjp_edgebars","title":"Plot a Horizontal Edgebars Chart following WJP style guidelines — wjp_edgebars","text":"wjp_edgebars() takes data frame specific data structure (usually long shaped) returns ggplot object edgebar chart following WJP style guidelines.","code":""},{"path":"https://ctoruno.github.io/WJPr/reference/wjp_edgebars.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot a Horizontal Edgebars Chart following WJP style guidelines — wjp_edgebars","text":"","code":"wjp_edgebars(   data,   y_value,   x_var,   label_var,   color_var = NULL,   bar_colors = NULL,   x_lab_pos = NULL,   y_lab_pos = 0,   nudge_lab = 2.5,   margin_top = 20,   bar_width = 0.35,   ptheme = WJP_theme() )"},{"path":"https://ctoruno.github.io/WJPr/reference/wjp_edgebars.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot a Horizontal Edgebars Chart following WJP style guidelines — wjp_edgebars","text":"data data frame containing data plotted. y_value string specifying variable data frame contains numeric values plotted bars. x_var string specifying variable data frame contains categories x-axis. label_var string specifying variable data frame contains labels displayed near bars. color_var string specifying variable data frame contains color groupings bars. Default NULL. bar_colors named vector specifying colors bars. Default NULL. x_lab_pos string specifying variable data frame contains order bars displayed. Default NULL. y_lab_pos numeric value specifying y-axis position displaying labels. Default 0. nudge_lab numeric value specifying padding displaying labels milimeters. Default 2.5. margin_top numeric value specifying top margin plot. Default 20. bar_width numeric value specifying width bars. single bars default value 0.35 recommended, plots two bars value 0.5 suitable. ptheme ggplot aesthetic theme applied chart. Default WJP_theme initilized package.","code":""},{"path":"https://ctoruno.github.io/WJPr/reference/wjp_edgebars.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot a Horizontal Edgebars Chart following WJP style guidelines — wjp_edgebars","text":"ggplot object representing edge bars plot.","code":""},{"path":"https://ctoruno.github.io/WJPr/reference/wjp_edgebars.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot a Horizontal Edgebars Chart following WJP style guidelines — wjp_edgebars","text":"","code":"if (FALSE) { # \\dontrun{ data <- data.frame(   y_value = c(30, 50, 20),   x_var = c(\"Category A\", \"Category B\", \"Category C\"),   label_var = c(\"Label A\", \"Label B\", \"Label C\") )  wjp_edgebars(data, \"y_value\", \"x_var\", \"label_var\") } # }"},{"path":"https://ctoruno.github.io/WJPr/reference/wjp_gauge.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot a Gauge Chart following WJP style guidelines — wjp_gauge","title":"Plot a Gauge Chart following WJP style guidelines — wjp_gauge","text":"function creates gauge chart using ggplot2 based provided data frame.","code":""},{"path":"https://ctoruno.github.io/WJPr/reference/wjp_gauge.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot a Gauge Chart following WJP style guidelines — wjp_gauge","text":"","code":"wjp_gauge(   data,   target,   colors,   cvec = NULL,   factor_order = NULL,   labels = NULL,   crop = c(-10, 0, 0, -8),   ptheme = WJP_theme() )"},{"path":"https://ctoruno.github.io/WJPr/reference/wjp_gauge.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot a Gauge Chart following WJP style guidelines — wjp_gauge","text":"data data frame containing data plotted. target string specifying variable data frame contains values plotted. colors string specifying variable data frame represents color groupings segments. cvec vector colors apply segments. factor_order vector specifying order segments plotted. labels string specifying variable data frame contains labels displayed. Default NULL. crop numeric vector specifying amount space crop Top, Right, Bottom, Right margins, respectively. Default c(-10,0,0,-8). ptheme ggplot2 theme object applied plot. Default WJP_theme().","code":""},{"path":"https://ctoruno.github.io/WJPr/reference/wjp_gauge.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot a Gauge Chart following WJP style guidelines — wjp_gauge","text":"ggplot object representing gauge chart.","code":""},{"path":"https://ctoruno.github.io/WJPr/reference/wjp_gauge.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot a Gauge Chart following WJP style guidelines — wjp_gauge","text":"","code":"if (FALSE) { # \\dontrun{ data <- data.frame(   target = c(10, 20, 30, 40),   colors = c(\"red\", \"blue\", \"green\", \"yellow\"),   labels = c(\"A\", \"B\", \"C\", \"D\") ) cvec <- c(\"red\", \"blue\", \"green\", \"yellow\")  wjp_gauge(data, \"target\", \"colors\", cvec, labels = \"labels\") } # }"},{"path":"https://ctoruno.github.io/WJPr/reference/wjp_lines.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot a Line Chart following WJP style guidelines — wjp_lines","title":"Plot a Line Chart following WJP style guidelines — wjp_lines","text":"wjp_lines() takes data frame specific data structure (usually long shaped) returns ggplot object line chart following WJP style guidelines.","code":""},{"path":"https://ctoruno.github.io/WJPr/reference/wjp_lines.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot a Line Chart following WJP style guidelines — wjp_lines","text":"","code":"wjp_lines(   data,   target,   grouping,   ngroups,   colors,   cvec = NULL,   labels = NULL,   repel = F,   transparency = F,   transparencies = NULL,   custom.axis = F,   x.breaks = NULL,   x.labels = NULL,   sec.ticks = NULL,   ptheme = WJP_theme() )"},{"path":"https://ctoruno.github.io/WJPr/reference/wjp_lines.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot a Line Chart following WJP style guidelines — wjp_lines","text":"data Data frame containing data plot target String. Column name variable supply values plot. grouping String. Column name variable supplies grouping values (X-Axis). ngroups Vector containing groups lines. single group, please input c = (1). colors String. Column name variable contains color grouping. cvec Named vector colors apply line. labels String. Column name variable containing value labels display plot. repel Boolean. TRUE, function apply ggrepel package repel labels. Default FALSE. transparency Boolean. TRUE, function apply different opacities patterns. Default FALSE. transparencies Named vector different opacities apply line. custom.axis Boolean. TRUE, x.breaks x.labels passed ggplot theme. Default FALSE. x.breaks Numeric vector custom breaks X-Axis. x.labels Character vector labels x-axis. length x.breaks. sec.ticks Numeric vector containing minor breaks plot X-Axis. ptheme ggplot theme function apply plot. default, function applies WJP_theme()","code":""},{"path":"https://ctoruno.github.io/WJPr/reference/wjp_lines.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot a Line Chart following WJP style guidelines — wjp_lines","text":"ggplot object","code":""},{"path":"https://ctoruno.github.io/WJPr/reference/wjp_lines.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot a Line Chart following WJP style guidelines — wjp_lines","text":"","code":"# Always load the WJP fonts if not passing a custom theme to function wjp_fonts()  # Preparing data gpp_data <- WJPr::gpp  data4lines <- gpp_data %>% filter(   country == \"Atlantis\" ) %>%   select(year, q1a, q1b, q1c) %>%   mutate(     across(       !year,       \\(x) as.double(x)     ),     across(       !year,       ~case_when(         .x <= 2  ~ 1,         .x <= 4  ~ 0,         .x == 99 ~ NA_real_       )     ),     year = as.character(year)   ) %>%   group_by(year) %>%   summarise(     across(       everything(),       \\(x) mean(x, na.rm = TRUE)     ),     .groups = \"keep\"   ) %>%   mutate(     across(       everything(),       \\(x) x*100     )   ) %>%   pivot_longer(     !year,     names_to  = \"variable\",     values_to = \"percentage\"    ) %>%   mutate(     institution = case_when(       variable == \"q1a\" ~ \"Institution A\",       variable == \"q1b\" ~ \"Institution B\",       variable == \"q1c\" ~ \"Institution C\"     ),     value_label = paste0(       format(         round(percentage, 0),         nsmall = 0       ),       \"%\"     )   ) #> Error in gpp_data %>% filter(country == \"Atlantis\") %>% select(year, q1a,     q1b, q1c) %>% mutate(across(!year, function(x) as.double(x)),     across(!year, ~case_when(.x <= 2 ~ 1, .x <= 4 ~ 0, .x ==         99 ~ NA_real_)), year = as.character(year)) %>% group_by(year) %>%     summarise(across(everything(), function(x) mean(x, na.rm = TRUE)),         .groups = \"keep\") %>% mutate(across(everything(), function(x) x *     100)) %>% pivot_longer(!year, names_to = \"variable\", values_to = \"percentage\") %>%     mutate(institution = case_when(variable == \"q1a\" ~ \"Institution A\",         variable == \"q1b\" ~ \"Institution B\", variable == \"q1c\" ~             \"Institution C\"), value_label = paste0(format(round(percentage,         0), nsmall = 0), \"%\")): could not find function \"%>%\"    # Plotting chart  wjp_lines(   data4lines %>% filter(institution == \"Institution A\"),                       target         = \"percentage\",                grouping       = \"year\",   ngroups        = 1,                    colors         = \"institution\",   cvec           = c(\"Institution A\" = \"#08605F\"),   labels         = \"value_label\"  ) #> Error in data %>% rename(target_var = all_of(target), grouping_var = all_of(grouping),     labels_var = all_of(labels), colors_var = all_of(colors)): could not find function \"%>%\""},{"path":"https://ctoruno.github.io/WJPr/reference/wjp_radar.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot a Radar Chart following WJP style guidelines — wjp_radar","title":"Plot a Radar Chart following WJP style guidelines — wjp_radar","text":"#' @description wjp_radar() takes data frame specific data structure (usually long shaped) returns ggplot object radar chart following WJP style guidelines.","code":""},{"path":"https://ctoruno.github.io/WJPr/reference/wjp_radar.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot a Radar Chart following WJP style guidelines — wjp_radar","text":"","code":"wjp_radar(   data,   axis_var,   target_var,   label_var,   color_var,   colors,   order_var,   maincat,   source = \"GPP\" )"},{"path":"https://ctoruno.github.io/WJPr/reference/wjp_radar.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot a Radar Chart following WJP style guidelines — wjp_radar","text":"data data frame containing data plotted. axis_var string specifying variable data frame contains groups axis. target_var string specifying variable data frame contains values plotted. label_var string specifying variable data frame contains labels displayed. color_var string specifying variable data frame contains color groupings. colors vector colors apply lines. first color applied percentages labels. order_var string specifying variable data frame contains display order categories. maincat string indicating category labels show radar. source string can take two values (GPP QRQ).","code":""},{"path":"https://ctoruno.github.io/WJPr/reference/wjp_radar.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot a Radar Chart following WJP style guidelines — wjp_radar","text":"ggplot object representing radar plot.","code":""},{"path":"https://ctoruno.github.io/WJPr/reference/wjp_radar.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot a Radar Chart following WJP style guidelines — wjp_radar","text":"","code":"if (FALSE) { # \\dontrun{ data <- data.frame(   axis_var = rep(letters[1:5], each = 3),   target_var = runif(15, 0, 1),   label_var = rep(LETTERS[1:5], each = 3),   order_var = rep(1:5, each = 3),   year = rep(2020:2022, 5) ) colors <- c(\"red\", \"blue\", \"green\") maincat <- 2022  wjp_radar(data, \"axis_var\", \"target_var\", \"label_var\", \"order_var\", colors, maincat) } # }"}]
